/**
 * File:	clients/sysconfig.ycp
 * Module:	Editor for /etc/sysconfig
 * Summary:	Dialogs include
 * Authors:	Michael Hager <mike@suse.de>
 *
 * $Id$
 */

{

  textdomain "sysconfig";
  //////////////////////////////////////////////////////////////////////////////////////
  //                     Utility- D I A L O G   D E F I N E S                         //
  //////////////////////////////////////////////////////////////////////////////////////


    /////////////////////////////////////////////////////////////////////////////////////
    //  Helptext                                                                        //
    //////////////////////////////////////////////////////////////////////////////////////

  UI(``{  global define HelpMsgStart()``{
      return( // helptext for popup
	     _("<p>With this editor, edit the variables in /etc/sysconfig configfiles</p>
"));
  }});



  //////////////////////////////////////////////////////////////////////////////////////
  //  Helptext                                                                        //
  //////////////////////////////////////////////////////////////////////////////////////

  UI(``{ global define HelpMsgBody() ``{
      return(  // helptext for popup - part 1/3
	     _("<p>After you save your changes, this editor changes the variables in the
corresponding  sysconfig file. Then it runs
SuSEconfig, which changes the underlying configuration files, stops and starts daemons,
and runs low-level configuration tools so your configuration in sysconfig takes effect.</p>
") +

		// helptext for popup - part 2/3
	     _("<p><b>Important:</b> You still can edit each individual configuration file manually.</p>") +

		// helptext for popup - part 3/3
	     _("<p> SuSEconfig saves a checksum of each configuration file, so that it can detect if
 you have manually changed any of them.  If you have changed a configuration file manually,
 it will not touch it.</p>") );
  }});



  //////////////////////////////////////////////////////////////////////////////////////
  //  Helptext                                                                        //
  //////////////////////////////////////////////////////////////////////////////////////

  UI(``{ global define HelpMsgNotice()``{
      return( // helptext for popup
	     _("<p>
Many of these variables are set by specialized YaST2
configuration modules like the \"Network configuration\".</p>
"));
  }});


  ///////////////////////////////////////////////////////////////////////////////////////////////////
  // getComboList                                                                                  //
  //-----------------------------------------------------------------------------------------------//
  // read the possible entrys of combobox, and mark the real value, so that it is shown as default //
  //-----------------------------------------------------------------------------------------------//

  global define getComboList( string key, map entry_map )
      ``{
      // get real value of the entry
      map    key_map      = lookup( rc_config_keys, key, $[] );
      string entry_value  = lookup(key_map, `value, "");

      // produce now a optionlist with the real entry, therefor
      // - first:  delete the real entry from the list, if it is in there
      // - second: add the real value

	  // first:
      list   entry_opts   = filter( `item, lookup( entry_map, `options, []), ``( item != entry_value ));
      // second:
      entry_opts = add( entry_opts, entry_value );

      // now, make from [ "tcp", "dgram" ] ->
      //                  [ `item( `id("tcp"), "tcp", false ), `item( `id("dgram"), "dgram", true ) ]
      //
      entry_opts = maplist( `entry, entry_opts, ``( `item( `id(entry), entry, entry == entry_value )));

      return( entry_opts );
  }


  ///////////////////////////////////////////////////////////////////////////////////////////////////
  // getDescr()                                                                                    //
  //-----------------------------------------------------------------------------------------------//
  // Read the description                                                                          //
  //-----------------------------------------------------------------------------------------------//

  global define getDescr( string key )
      ``{
      map key_map          = lookup( rc_config_keys, key, $[] );
      any descr            = lookup(key_map, `descr, nil);

      if ( descr == nil )
      {
	  descr = "";

	  // save it
	  key_map        = add( key_map, `descr, descr);
	  rc_config_keys = add( rc_config_keys, key, key_map );
      }


      // I4l_XXX_3 has no comment, but I4L_XXX_0 has!!!
      if ( descr == "" )
      {
	  if ( substring( key, size(key)-2, 1 ) == "_" )
	  {
	      string  comment_key = substring( key, 0, size(key)-2 ) + "_0";

	      map comment_key_map          = lookup( rc_config_keys, comment_key, $[] );
	      descr                        = lookup( comment_key_map, `descr, nil);

	      if ( descr == nil ) descr = "";
	  }
      }

      // delete all "#"
      descr = mergestring(splitstring( descr, "#"),"");
      return( descr );
  };


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // getTypedef()                                                                                  //
    //-----------------------------------------------------------------------------------------------//
    // Returns the typedef of the given key                                                          //
    //-----------------------------------------------------------------------------------------------//
    global define getTypedef( string key )
    ``{
             map key_map          = lookup( rc_config_keys, key, $[] );
             any typedef          = lookup(key_map, `typedef, nil);

	     if ( typedef == nil )
	     {
		 typedef = "";

		 // save it
		 key_map        = add( key_map, `typedef, typedef);
		 rc_config_keys = add( rc_config_keys, key, key_map );
	     }


	     return( typedef );
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // getType()                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Returns the type of the given key                                                             //
    //-----------------------------------------------------------------------------------------------//
    global define getType( string key )
    ``{
             map key_map          = lookup( rc_config_keys, key, $[] );
             any mytype          = lookup(key_map, `datatype, nil);

	     if ( mytype == nil )
	     {
		 mytype = "";

		 // save it
		 key_map        = add( key_map, `datatype, mytype);
		 rc_config_keys = add( rc_config_keys, key, key_map );
	     }

	     return( mytype );
    }




    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // getComboBoxOption()                                                                           //
    //-----------------------------------------------------------------------------------------------//
    // Returns the necessary options for the ComboBox value depending on the type and typedef        //
    //-----------------------------------------------------------------------------------------------//
    global define getComboBoxOption( string key )
	``{
	if ( getType(key) == "boolean" )        // boolean: distinction of cases
	{
	    if ( getTypedef(key) == "strict" )
	    {
		return("");
	    } else {
		return(`editable);
	    }
	} else if ( getType(key) == "string" )  // string: no distinction, ComboBox is always editable
	{
	    return(`editable);
	} else if ( getType(key) == "integer" ) // integer: no distinction, ComboBox is always editable
	{
	    return(`editable);
	} else if ( getType(key) == "enum" )    // enum: distinction of cases
	{
	    if ( getTypedef(key) == "strict" )
	    {
		return("");
	    } else {
		return(`editable);
	    }
	} else {                                // default: editable
	    return(`editable);
	}
    }



    //////////////////////////////////////////////////////////////////////////////////////////////////
    //                              D I A L O G   D E F I N E S                                     //
    //////////////////////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog                                                                                        //
    //-----------------------------------------------------------------------------------------------//
    // Displays a message to the user in a small dialog with an OK                                   //
    //-----------------------------------------------------------------------------------------------//

    UI( ``{
	global define ErrorMessage() ``{
	    // ok pushbutton: confirm the dialog
	    OpenDialog(
		`opt(`decorated),
		`HBox(
		    `HSpacing(1),
		    `VBox(
			`VSpacing(0.2),
			// error popup header
			`Heading( _("Error")),
			`VSpacing(0.2),
			// Error popup message
			`Label(_("An error occured during execution of SuSEconfig.
Probably \"/sbin/SuSEconfig\" is missing or the module has no root permission.
")),
			// push button label
			`PushButton(`opt(`default), _("&OK and Exit")),
			`VSpacing(0.2)
			),
		    `HSpacing(1)
		    )
		);
	    UserInput();
	    CloseDialog();
	};
    });

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog DisplayLogFile                                                                         //
    //-----------------------------------------------------------------------------------------------//
    // Display Suseconfig logfile                                                                    //
    //-----------------------------------------------------------------------------------------------//

    UI( ``{
	global define DisplayLogFile( string msg_text ) ``{

	    term text = `RichText( `opt(`plainText), msg_text );
	    y2debug( "<<--%1", text);

	    OpenDialog(`opt ( `decorated ),
		       `VBox (`HSpacing(75),
			      // header in error popup
			      `Heading( _("Logging")),
			      text,
			      // push button label
			      `PushButton( `id(`ok_help), `opt(`default), _("OK and Exit") )
			   )
		);

	    SetFocus(`id(`ok_help) );

	    any r = UserInput();
	    CloseDialog();
	    return (r);
	};
    });


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog AskShowLog                                                                             //
    //-----------------------------------------------------------------------------------------------//
    // Ask the User, if he wants to show the SuSEConfig logfile                                      //
    //-----------------------------------------------------------------------------------------------//

    UI( ``{
	global define AskShowLog( ) ``{

	    OpenDialog(`opt(`decorated),
			// popup header
		       `VBox( `Heading( _("SuSEConfig Logging")) ,
				// popup question
			      `VBox( `Label( _("Your changes have been saved and SuSEconfig has run.
Do you want to view the SuSEConfig log?
")),
				     `HBox(
					// push button label
					 `PushButton( `id(`log),  _("Show Log File") ),
					// push button label
					 `PushButton( `id(`no_log), `opt(`default), _("Exit without showing log file") )
					 )
				  )
			   )
		);
	    any r = UserInput();
	    CloseDialog();


	    return (r);
	};
    });

    UI( ``{
	global define AskFwShowLog( ) ``{

	    OpenDialog(`opt(`decorated),
			// popup header
		       `VBox( `Heading( _("Logging")) ,
				// popup question
			      `VBox( `Label( _("Your changes have been saved and the firewalls have been restarted.
Do you want to view the relevant log file?
")),
				     `HBox(
					// push button label
					 `PushButton( `id(`log),  _("Show Log File") ),
					// push button label
					 `PushButton( `id(`no_log), `opt(`default), _("Exit without showing log file") )
					 )
				  )
			   )
		);
	    any r = UserInput();
	    CloseDialog();


	    return (r);
	};
    });


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog WaitSuSEconfig                                                                             //
    //-----------------------------------------------------------------------------------------------//
/*
    UI( ``{
	global define WaitSuSEconfig( ) ``{
	    OpenDialog(`opt(`decorated),
		       `VBox( `Heading( _("SuSEConfig is running ...")) ,
			      `Label( _("Depending on  the CPU and the amount of memory,\nthis procedure can take some time."))
			   )
		);
	};
    });
*/
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog WaitRestartFirewall                                                                             //
    //-----------------------------------------------------------------------------------------------//

    UI( ``{
	global define WaitRestartFirewall( ) ``{
	    OpenDialog(`opt(`decorated),
			// popup window header
		       `VBox( `Heading( _("(Re)Start firewall ...")) ,
				// popup window text
			      `Label( _("\nThis procedure can take some time."))
			   )
		);
	};
    });


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog d5                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for 5 entries                                                      //
    //-----------------------------------------------------------------------------------------------//

    global define getD5Dialog( list entry_list )
	``{

	map l1 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 1 )), 0, nil );
	map l2 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 2 )), 0, nil );
	map l3 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 3 )), 0, nil );
	map l4 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 4 )), 0, nil );
	map l5 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 5 )), 0, nil );

	if (l1 == nil) l1 = $[];
	if (l2 == nil) l2 = $[];
	if (l3 == nil) l3 = $[];
	if (l4 == nil) l4 = $[];
	if (l5 == nil) l5 = $[];

	string l1_key =  lookup( l1, `linekey, "");
	string l2_key =  lookup( l2, `linekey, "");
	string l3_key =  lookup( l3, `linekey, "");
	string l4_key =  lookup( l4, `linekey, "");
	string l5_key =  lookup( l5, `linekey, "");

	string help_text = "";

	/*
	even add helptext if getDescr(..) == ""
	help_text = sformat( "<b>%1:</b><p>%2<p><b>%3:</b><p>%4</p><p><b>%5:</b><p>%6</p>",
			     l1_key, getDescr(l1_key),
			     //l1_key, getDescr(l1_key), ???????????????
			     l2_key, getDescr(l2_key),
			     l3_key, getDescr(l3_key)   );

	help_text = sformat( "%1<p><b>%2:</b><p>%3</p><p><b>%4:</b><p>%5</p>", help_text,
			     l4_key, getDescr(l4_key),
			     l5_key, getDescr(l5_key));
	*/

	list all_keys = [  l1_key, l2_key, l3_key, l4_key, l5_key ];
	foreach( `lx_key, all_keys, ``{
	    string lx_key_help = getDescr ( lx_key );
	    if (lx_key_help != "" ) help_text = help_text + sformat("<b>%1:</b><p>%2</p>", lx_key, lx_key_help);
	});


//	  return(`VBox( `HSpacing(60),`VSpacing(1.2),
//		 `HBox(
//		       `VBox( `Top(`ComboBox ( `id("d5_1"), `opt(`editable,`hstretch), lookup(l1, `linekey, ""),  getComboList(l1_key, l1))),
//			      `Top(`ComboBox ( `id("d5_2"), `opt(`editable,`hstretch), lookup(l2, `linekey, ""),  getComboList(l2_key, l2))),
//			      `Top(`ComboBox ( `id("d5_3"), `opt(`editable,`hstretch), lookup(l3, `linekey, ""),  getComboList(l3_key, l3))),
//			      `Top(`ComboBox ( `id("d5_4"), `opt(`editable,`hstretch), lookup(l4, `linekey, ""),  getComboList(l4_key, l4))),
//			      `Top(`ComboBox ( `id("d5_5"), `opt(`editable,`hstretch), lookup(l5, `linekey, ""),  getComboList(l5_key, l5))),
//			      `HStretch()
//			      ),
//		       `HSpacing(1),
//		       `HWeight(100,`RichText( help_text)),
//		       `HSpacing(1)
//		       )));

	  return(`VBox( `HSpacing(60),`VSpacing(1.2),
			`HBox(
			      `VBox( `Top(`ComboBox ( `id("d5_1"),
						      `opt(getComboBoxOption(l1_key),`hstretch),
						      lookup(l1, `linekey, ""),
						      getComboList(l1_key, l1))),
				     `Top(`ComboBox ( `id("d5_2"),
						      `opt(getComboBoxOption(l2_key),`hstretch),
						      lookup(l2, `linekey, ""),
						      getComboList(l2_key, l2))),
				     `Top(`ComboBox ( `id("d5_3"),
						      `opt(getComboBoxOption(l3_key),`hstretch),
						      lookup(l3, `linekey, ""),
						      getComboList(l3_key, l3))),
				     `Top(`ComboBox ( `id("d5_4"),
						      `opt(getComboBoxOption(l4_key),`hstretch),
						      lookup(l4, `linekey, ""),
						      getComboList(l4_key, l4))),
				     `Top(`ComboBox ( `id("d5_5"),
						      `opt(getComboBoxOption(l5_key),`hstretch),
						      lookup(l5, `linekey, ""),
						      getComboList(l5_key, l5))),
				     `HStretch()
				     ),
			      `HSpacing(1),
			      `HWeight(100,`RichText( help_text)),
			      `HSpacing(1)
			      )));

    };




    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog d4                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for 4 entries                                                      //
    //-----------------------------------------------------------------------------------------------//

    global define getD4Dialog( list entry_list )
	``{

	map l1 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 1 )), 0, nil );
	map l2 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 2 )), 0, nil );
	map l3 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 3 )), 0, nil );
	map l4 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 4 )), 0, nil );

	if (l1 == nil) l1 = $[];
	if (l2 == nil) l2 = $[];
	if (l3 == nil) l3 = $[];
	if (l4 == nil) l4 = $[];

	string l1_key =  lookup( l1, `linekey, "");
	string l2_key =  lookup( l2, `linekey, "");
	string l3_key =  lookup( l3, `linekey, "");
	string l4_key =  lookup( l4, `linekey, "");

	string help_text = "";

	help_text = sformat( "<b>%1:</b><br>%2<p><b>%3:</b><br>%4</p><p><b>%5:</b><br>%6</p>",
			     l1_key, getDescr(l1_key),
			     l2_key, getDescr(l2_key),
			     l3_key, getDescr(l3_key)   );

	help_text = sformat( "%1<p><b>%2:</b><br>%3</p>", help_text,
			     l4_key, getDescr(l4_key));

//	  return(`VBox( `HSpacing(60),
//			`VSpacing(1.2),
//			`HBox(
//			      `VBox( `Top(`ComboBox ( `id("d4_1"), `opt(`editable,`hstretch), lookup(l1, `linekey, ""),  getComboList(l1_key, l1))),
//				     `Top(`ComboBox ( `id("d4_2"), `opt(`editable,`hstretch), lookup(l2, `linekey, ""),  getComboList(l2_key, l2))),
//				     `Top(`ComboBox ( `id("d4_3"), `opt(`editable,`hstretch), lookup(l3, `linekey, ""),  getComboList(l3_key, l3))),
//				     `Top(`ComboBox ( `id("d4_4"), `opt(`editable,`hstretch), lookup(l4, `linekey, ""),  getComboList(l4_key, l4))),
//				     `HStretch()
//				     ),
//			      `HSpacing(1),
//			      `HWeight(100,`RichText( help_text)),
//			      `HSpacing(1)
//			      ) )
//		 );

	  return(`VBox( `HSpacing(60),
			`VSpacing(1.2),
			`HBox(
			      `VBox( `Top(`ComboBox ( `id("d4_1"),
						      `opt(getComboBoxOption(l1_key),`hstretch),
						      lookup(l1, `linekey, ""),
						      getComboList(l1_key, l1))),
				     `Top(`ComboBox ( `id("d4_2"),
						      `opt(getComboBoxOption(l2_key),`hstretch),
						      lookup(l2, `linekey, ""),
						      getComboList(l2_key, l2))),
				     `Top(`ComboBox ( `id("d4_3"),
						      `opt(getComboBoxOption(l3_key),`hstretch),
						      lookup(l3, `linekey, ""),
						      getComboList(l3_key, l3))),
				     `Top(`ComboBox ( `id("d4_4"),
						      `opt(getComboBoxOption(l4_key),`hstretch),
						      lookup(l4, `linekey, ""),
						      getComboList(l4_key, l4))),
				     `HStretch()
				     ),
			      `HSpacing(1),
			      `HWeight(100,`RichText( help_text)),
			      `HSpacing(1)
			      ) )
		 );

    };



    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog d3                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for 3 entries                                                      //
    //-----------------------------------------------------------------------------------------------//

    global define getD3Dialog( list entry_list )
	``{

	map l1 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 1 )), 0, nil );
	map l2 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 2 )), 0, nil );
	map l3 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 3 )), 0, nil );

	if (l1 == nil) l1 = $[];
	if (l2 == nil) l2 = $[];
	if (l3 == nil) l3 = $[];

	string l1_key =  lookup( l1, `linekey, "");
	string l2_key =  lookup( l2, `linekey, "");
	string l3_key =  lookup( l3, `linekey, "");

	string help_text = "";

	help_text = sformat( "<b>%1:</b><br>%2<p><b>%3:</b><br>%4</p><p><b>%5:</b><br>%6</p>",
			     l1_key, getDescr(l1_key),
			     l2_key, getDescr(l2_key),
			     l3_key, getDescr(l3_key)   );


//	  return(`VBox( `HSpacing(60),`VSpacing(1.2),
//		 `HBox(
//		       `VBox( `Top( `ComboBox ( `id("d3_1"), `opt(`editable,`hstretch), lookup(l1, `linekey, ""),  getComboList(l1_key, l1))),
//			      `Top( `ComboBox ( `id("d3_2"), `opt(`editable,`hstretch), lookup(l2, `linekey, ""),  getComboList(l2_key, l2))),
//			      `Top( `ComboBox ( `id("d3_3"), `opt(`editable,`hstretch), lookup(l3, `linekey, ""),  getComboList(l3_key, l3))),
//			      `VStretch()
//			      ),
//		       `HSpacing(1),
//		       `HWeight(100,`RichText( help_text)),
//		       `HSpacing(1) )));

	  return(`VBox( `HSpacing(60),`VSpacing(1.2),
			`HBox(
			      `VBox( `Top( `ComboBox ( `id("d3_1"),
						       `opt(getComboBoxOption(l1_key),`hstretch),
						       lookup(l1, `linekey, ""),
						       getComboList(l1_key, l1))),
				     `Top( `ComboBox ( `id("d3_2"),
						       `opt(getComboBoxOption(l2_key),`hstretch),
						       lookup(l2, `linekey, ""),
						       getComboList(l2_key, l2))),
				     `Top( `ComboBox ( `id("d3_3"),
						       `opt(getComboBoxOption(l3_key),`hstretch),
						       lookup(l3, `linekey, ""),
						       getComboList(l3_key, l3))),
				     `VStretch()
				     ),
			      `HSpacing(1),
			      `HWeight(100,`RichText( help_text)),
			      `HSpacing(1) )));
   };




    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog d2                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for 2 entries                                                      //
    //-----------------------------------------------------------------------------------------------//

    global define getD2Dialog( list entry_list )
	``{

	map l1 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 1 )), 0, nil );
	map l2 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 2 )), 0, nil );

	if (l1 == nil) l1 = $[];
	if (l2 == nil) l2 = $[];

	string l1_key =  lookup( l1, `linekey, "");
	string l2_key =  lookup( l2, `linekey, "");

	string help_text = "";

	help_text = sformat( "<b>%1:</b><br>%2<p><b>%3:</b><br>%4</p><p>",
			     l1_key, getDescr(l1_key),
			     l2_key, getDescr(l2_key)   );

//	  return(
//	  `VBox(`HSpacing(60),`VSpacing(1.2),
//		  `Left( `ComboBox ( `id("d2_1"), `opt(`editable), lookup(l1, `linekey, ""),  getComboList(l1_key, l1))),
//		  `Left( `ComboBox ( `id("d2_2"), `opt(`editable), lookup(l2, `linekey, ""),  getComboList(l2_key, l2))),
//		`VSpacing(1),
//		`RichText( help_text) ));

	  return(
		 `VBox(`HSpacing(60),`VSpacing(1.2),
		       `Left( `ComboBox ( `id("d2_1"),
					  `opt(getComboBoxOption(l1_key),`hstretch),
					  lookup(l1, `linekey, ""),
					  getComboList(l1_key, l1))),
		       `Left( `ComboBox ( `id("d2_2"),
					  `opt(getComboBoxOption(l2_key),`hstretch),
					  lookup(l2, `linekey, ""),
					  getComboList(l2_key, l2))),
		       `VSpacing(1),
		       `RichText( help_text) ));
   };


    global define string get_last_path_elemnt(path p)
    ``{
	if (size(p) == 0)
	{
	    return "";
	}

	list path_list = splitstring( "" + p, "." );
	string var = select(path_list, size(path_list) - 1, "unknown");

	if (size(var) > 0 && substring(var, 0, 1) == "\"")
	{
	    var = substring(var, 1);
	}

	if (size(var) > 0 && substring(var, size(var) - 1, 1) == "\"")
	{
	    var = substring(var, 0, size(var) - 1);
	}

	return var;
    }


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog d1                                                                                     //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for one entrie                                                     //
    //-----------------------------------------------------------------------------------------------//

    global define getD1Dialog( list entry_list )
	``{

	map l1 = select( filter( `entry, entry_list, ``( lookup( entry, `entrynb, 0) == 1 )), 0, nil );

	if (l1 == nil) l1 = $[];

	string l1_key =  lookup( l1, `linekey, "");

	string help_text = "";
	string var = get_last_path_elemnt(lookup(l1, `path, .unknown));

	help_text = sformat( "<b>%1:</b><br>%2", var, getDescr(l1_key)   );

//	  return(
//	  `VBox(`HSpacing(60),`VSpacing(1.2),
//		  `Left(`ComboBox ( `id("d1_1"), `opt(`editable), lookup(l1, `linekey, ""),  getComboList(l1_key, l1))),
//		`VSpacing(1),
//		`RichText( help_text) ));

	  return(
		 `VBox(`HSpacing(60),`VSpacing(1.2),
		       `Left(`ComboBox ( `id("d1_1"),
					 `opt(getComboBoxOption(l1_key),`hstretch),
					 var,
//					 lookup(l1, `linekey, ""),
					 getComboList(l1_key, l1))),
		       `VSpacing(1),
		       `RichText( help_text) ));
   };



    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Dialog dir                                                                                    //
    //-----------------------------------------------------------------------------------------------//
    // Predefined standard dialog for displaying only a message                                      //
    //-----------------------------------------------------------------------------------------------//

    global define getDirDialog( string curr_text )
	``{
	return( `VBox(`HSpacing(60),`VSpacing(1), `RichText( curr_text) ));
    };


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Layout Mainwindow                                                                             //
    //-----------------------------------------------------------------------------------------------//

    global define getMainWindowTerm( list tree_data )
	``{
	return(
	    // Main dialog edit rc_config
	    // tree widget label
	    `HBox(`HWeight( 35, `Tree( `id(`key),  `opt(`notify,`vstretch),  _("&Config options"), tree_data )),
		  `HSpacing(1),
		  `HWeight( 65, `VBox(`VSpacing(0.2),
				      `ReplacePoint(`id(`rp),
						    `Label("This is a label")  )
		      )
		      )
		));
    };



    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Search dialog                                                                                 //
    //-----------------------------------------------------------------------------------------------//
    //-----------------------------------------------------------------------------------------------//


    UI(``{
	global define SearchDlg()
	    ``{
	    // helptext for popup search
	    string helptextCR = _("Enter a keyword related to the information needed.");

	    OpenDialog( `opt(`decorated ),
			`VBox(`HSpacing(60),
			    // search popup window header
			      `Heading(_("Search for a sysconfig variable")),
			      `VSpacing(0.5),
			      `HBox(`VSpacing(10),
				    `RichText( helptextCR ),
				    `HSpacing(2),
				    `VBox(
					`VSpacing(1),
					// text entry label
					`TextEntry(`id(`search_entry), _("&Search for:")),
					`VSpacing(1),
					// check box label
					`Left(`CheckBox(`id(`ignore), _("abg &matches AbG"),    true)),
					// check box label
					`Left(`CheckBox(`id(`nkey),   _("Search &keyname"),     true)),
					// check box label
					`Left(`CheckBox(`id(`ndescr), _("Search &description"), true)),
					// check box label
					`Left(`CheckBox(`id(`nvalue), _("Search &value"),       false)),
					`VSpacing(1)
					),
				    `HSpacing(2)
				  ),
			      `VSpacing(0.5),
			      `HBox(
				  // push button label
				  `PushButton(`id(`ok), `opt(`default),    _("&OK")),
				  // push button label
				  `PushButton(`id(`cancel), _("&Cancel"))
				  )
			    )
		);

	    SetFocus(`id(`search_entry));
	    symbol  doit            = `cancel;

	    repeat
		{
		    //-------------------------------
		    // Check the User input / change popup ...
		    //-------------------------------
		    doit = UserInput();

		} until (doit == `ok  ||  doit == `cancel );

	    map answer = $[];
	    answer = add( answer, "search", QueryWidget(`id(`search_entry),   `Value));
	    answer = add( answer, "ignore", QueryWidget(`id(`ignore), `Value));
	    answer = add( answer, "nkey",   QueryWidget(`id(`nkey),   `Value));
	    answer = add( answer, "nvalue", QueryWidget(`id(`nvalue), `Value));
	    answer = add( answer, "ndescr", QueryWidget(`id(`ndescr), `Value));


	    CloseDialog();

	    if ( doit == `cancel )
		{
		    return( nil );
		}
	    else
		{
		    return( answer );
		}
	}; });


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Search dialog                                                                                 //
    //-----------------------------------------------------------------------------------------------//
    //-----------------------------------------------------------------------------------------------//


    UI(``{
	global define HelpDlg()
	    ``{

	    string helptextCR = "";
	    if ( WFM::firewall_mode )
	    {
	       helptextCR = HelpMsgStart()  + HelpMsgBody()  + HelpMsgNotice();
	    }
	    else if (WFM::powertweak_only_mode == true)
	    {
		// help text for powertweak only configuration - 1/3
		helptextCR = _("<p>Here you can edit powertweak configuration, which is stored in /etc/powertweak/tweaks file.</p>")
		// help text for powertweak only configuration - 2/3
		+ _("You can configure hardware and kernel parameters listed in tree on the left side of dialog.")
		// help text for powertweak only configuration - 3/3
		+ _("<p><b>Warning:</b> Powertweak configuration is only for real experts! Setting wrong value can result in system lock or data loss!</p>");
	    }
	    else
	    {
	       helptextCR = HelpMsgBody();
	    }

	    OpenDialog( `opt(`decorated ),
			`HBox( `VSpacing(16),
			       `VBox(
				   `HSpacing(60),
				   // popup window header
				   `Heading(_("Help")),
				   `VSpacing(0.5),
				   `RichText( helptextCR ),
				   `VSpacing(1.5),
				    // push button label
				   `PushButton(`id(`ok), `opt(`default),    _("&OK"))
				   )
			    )
		);

	    SetFocus(`id(`ok));

	    UserInput();
	    //
	    CloseDialog();

	    return;

	}; });


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Save dialog							     //
    //------------------------------------------------------------------------------------------------//
    //------------------------------------------------------------------------------------------------//


    UI(``{

	global define SaveDlg( list entry_list, boolean powertweak_only)
	    ``{
	    // helptext in popup window
	    string helptextCR = _("Here, see the values YaST2 will change.
Choose \"OK\" for YaST2 to save these changes.
Choose \"Cancel\" to edit the values again.
");

	    list table_list = maplist( `entry, entry_list,
				       ``{
					   string descr = lookup( entry, `descr,   "");

					   // delete # from description
					   descr = mergestring(splitstring(descr, "#"),"");
					   // delete \n from description
					   descr = mergestring(splitstring(descr, "\n"),"");

					    // remove html tags from helps
					    list tags = [ "BR", "/P", "P", "B", "/B", "EM", "/EM", "I", "/I", "TT", "/TT",
						"/BIG",  "BIG",  "CODE", "/CODE", "STRONG", "/STRONG", "PRE",  "/PRE",
						 "LARGE", "/LARGE", "HR", "H1", "/H1", "H2", "/H2", "H3", "/H3"
					    ];

					    foreach(string t, tags, ``{
						    string tag = "<" + t + ">";

						    while (issubstring(descr, tag))
						    {
							integer pos = find(descr, tag);
							descr = substring(descr, 0, pos) + substring(descr, pos + size(tag));
						    }

						    tag = tolower(tag);

						    while (issubstring(descr, tag))
						    {
							integer pos = find(descr, tag);
							descr = substring(descr, 0, pos) + substring(descr, pos + size(tag));
						    }
						}
					    );


					   return (`item( `id(WFM::get_last_path_elemnt(lookup( entry, `path, .x))),
							  WFM::get_last_path_elemnt(lookup( entry, `path, .x)),
							  lookup( entry, `value,   ""),
							  substring( descr, 0, 70)));
				       });

	    // save dialog - header text
	    string header = (powertweak_only == true) ?
	    // save dialog - header text
	    _("Save Powertweak configuration") :
	    // save dialog - header text
	     _("Save sysconfig variables");

	    OpenDialog( `opt(`decorated ),
			`HBox( `VSpacing(12),
			       `VBox(`HSpacing(70),
				     //heading of popup
				     `Heading(header),
				     `Label(  helptextCR ),
				     `VSpacing(0.5),
				     // table column header
				     `Table(`id(`table),`header(_("Name"), _("NEW VALUE"), _("Description") ), table_list ),
				     `VSpacing(0.5),
				     `HBox(
					 // push button label
					 `PushButton(`id(`ok), `opt(`default),    _("&OK")),
					 // push button label
					 `PushButton(`id(`cancel), _("&Cancel"))
					 )
				   )
			    )
		);

	    SetFocus(`id(`table));
	    symbol  doit            = `cancel;

	    repeat
		{
		    //-------------------------------
		    // Check the User input / change popup ...
		    //-------------------------------
		    doit = UserInput();

		} until (doit == `ok  ||  doit == `cancel );

	    any ret = QueryWidget(`id(`table), `CurrentItem);
	    y2debug(sformat("%1", ret ));

	    CloseDialog();


	    if ( doit == `cancel )
		{
		    return( `cancel );
		}
	    else
		{
		    // ret is nil if table is empty
		    return( ret );
		}
	}; });

    ///////////////////////////////////////////////////////////////////////////////////////////////////
    // Goto dialog, wich appeas after a search							     //
    //------------------------------------------------------------------------------------------------//
    //------------------------------------------------------------------------------------------------//


    UI(``{
	global define GotoDlg( list entry_list )
	    ``{
	    // helptext for search popup
	    string helptextCR = _("Here, view the results of your search. If you see the item you want, click this item then click \"OK\". Otherwise, click \"Cancel\" to quit the search.");

	    list table_list = maplist( `entry, entry_list,
				       ``{
					   string descr = lookup( entry, `descr,   "");

					   // delete # from description
					   descr = mergestring(splitstring(descr, "#"),"");

					   // delete \n from description
					   descr = mergestring(splitstring(descr, "\n"),"");

					   return (`item( `id(lookup( entry, `linekey, "x")),
							  lookup( entry, `linekey, ""),
							  lookup( entry, `value,   ""),
							  substring( descr, 0, 70)));
				       });


	    OpenDialog( `opt(`decorated ),
			`VBox(`HSpacing(80),
			      //heading of popup
			      `Heading(_("Search for a sysconfig variable")),
			      `VSpacing(0.5),
			      `HBox(`VSpacing(10),
				    `HWeight(30,`RichText( helptextCR )),
				    `HSpacing(2),
				    // Column header
				    `HWeight(70,`Table(`id(`table),`header(_("Name"), _("Value"), _("Description") ), table_list )),
				    `HSpacing(2)
				  ),
			      `VSpacing(0.5),
			      `HBox(
				    // push button label
				  `PushButton(`id(`ok), `opt(`default),    _("&OK")),
				    // push button label
				  `PushButton(`id(`cancel), _("&Cancel"))
				  )
			    )
		);

	    SetFocus(`id(`table));
	    symbol  doit            = `cancel;

	    repeat
		{
		    //-------------------------------
		    // Check the User input / change popup ...
		    //-------------------------------
		    doit = UserInput();

		} until (doit == `ok  ||  doit == `cancel );

	    any ret = QueryWidget(`id(`table), `CurrentItem);

	    CloseDialog();


	    if ( doit == `cancel )
		{
		    return( nil );
		}
	    else
		{
		    return( ret );
		}
	}; });


}
