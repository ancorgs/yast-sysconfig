/*
 *************************************************************
 *
 *     YaST2      SuSE Labs                        -o)
 *     --------------------                        /\\
 *                                                _\_v
 *           www.suse.de / www.suse.com
 * ----------------------------------------------------------
 *
 * Author:        Michael Hager <mike@suse.de>
 *
 * Purpose:
 *
 * Modify:
 *
 * external function:
 *
 *
 *************************************************************

 $Id$

*/

{
    ////////////////////////////////////////////////////////////
    // Testmode, for example fo screenshots
    boolean test_mode    = lookup ( user_settings, "test_mode", false );

    ////////////////////////////////////////////////////////////
    // Read the current architecture (no architecture depended modes yet
    // string architecture = lookup( user_settings, "architecture", default_architecture);



    //////////////////////////////////////////////////////////////////////////////////////
    //                                  P O P U P S                                     //
    //////////////////////////////////////////////////////////////////////////////////////

    // None at the moment
    

    /////////////////////////////////////////////////////////////////////////////////////////////////////
    // MAIN:
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    // Options to test this modules, but the other modules are in testmode:
    // test_mode   = true;
    // test_mode   = false;
    // todo: comment all options above


    term contents =
	    // main dialog: 
	`HSquash( `VBox(
			   `VSpacing( 1 ),
			   `TextEntry(`id(`connectId), "&My first Input"),
			   `CheckBox(`id(`kinternet),  "M&y first Checkbox", true),
			   `VSpacing( 3 )
	));
    
    string help_text = "";

    // helptext  "main dialog rc_config" 
    help_text =  UI("<p>My helptext</p>");

     // using SetContents (define in rc_config.ycp)
     UI(`SetContents("rc_config - modul", contents, help_text, true, true ));

     // changing Label to Finish for the last step
     UI(`ChangeWidget(`id(`next), `Label,  _("&Finish") ) );
      
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////  Loop for User Input ....
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    symbol ret = `next;

    repeat
    {
        ret= UI(`UserInput());

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  FINISH
        ////////////////////////////////////////////////////////////////////////////////////////////////////////
	
        if (ret == `next)
        {
	    string  connectId    = UI( `QueryWidget(`id(`connectId), `Value) );
	    boolean kinternetOn  = UI( `QueryWidget(`id(`kinternet), `Value) );


	    _debug( " connId, kinternetON: ", connectId,  kinternetOn);
	    
	    // notify a line is selected
	    if ( connectId != "" )
	    {
		// Write a config file
		//    list rc_dialout = [ "# this file is autogenerated by YaST2 T-DSL configuration",
		//			  " ",
		//			  "MODE   = tdsl",
		//			  "DEVICE = " + connectId
		//    ];
		//    
		// With SCR (you need a proper agent ...)
		//   SCR(`Write(.etc.rc.dialout_write, rc_dialout ));
		//
		// or with wfm: WriteString(string filename, string cont) -> boolean
		//   WriteString( "/etc/xy.conf", "#test \nMODE = tdsl \n" + connectId  );
		
		if ( kinternetOn )
		{
		    UI(`DisplayMessage( _("Checkbox is on" )));
		}
		else
		{
		    UI(`DisplayMessage( _("Checkbox is off" )));
		}
	    }
	    else
	    {
              // No line is inserted:
              UI(`DisplayMessage( _("You have to enter a text")));
	      ret = `again;
	    }

	}


        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  
        ////////////////////////////////////////////////////////////////////////////////////////////////////////

	if ( ret == `back)
	{
	    if ( ret == `back )
	    {
		 UI(`ChangeWidget(`id(`next), `Label,  _("&Next") ) );
	    }
	}

  } until (ret == `next || ret == `back || ret == `cancel);
    
   return ret;
}



