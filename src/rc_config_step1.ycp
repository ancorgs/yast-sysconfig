/*
   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|////////////////////////////////////
   \\							                 //
   \\                                                                    //    
   \\                    __   __    ____ _____ ____                      //    
   \\                    \ \ / /_ _/ ___|_   _|___ \                     //    
   \\                     \ V / _` \___ \ | |   __) |                    //    
   \\                      | | (_| |___) || |  / __/                     //    
   \\                      |_|\__,_|____/ |_| |_____|                    //    
   \\                                                         -o)        //
   --------------------------------------------------------   /\\  --------
   \\	                                        	     _\_v  
   \\
   \\   Author:        Michael Hager <mike@suse.de>
   \\   
   \\   Description:   rc_config editior
   \\   
   \\   Purpose:       graphical, hierachical rc-config editor
   \\   
   \\   external data: SRC( .rc.* )
   \\
   ------------------------------------------------------------------------
   \\ $Id$


////////////////////////////////////////////////////////////////////////////////

    namespace:
   
    read, the next few lines, then you know what I mean with:
    - "parent-nodes"
    - "leaf-nodes"
   
    In rc_config editor you see on the left a "tree widget" and on the right a "dialog".
    In the "tree widget" you have nodes, you can collaps or expand, that are "parent-nodes"
    Nodes which are "leafs" of the tree, which you can not expand, are the "leaf-nodes",
    If you click at this leaf-nodes, a editable dialog on the rigth will appear, in which
    you can edit rc_config-values.
   
    
////////////////////////////////////////////////////////////////////////////////

    data structure for internal use:
    Example internal data structure of all rc_config KEYs:

    list rc_config_keys =

       map rc_config_keys =
       $[ "MAIL_LEVEL":$[  `value:"warn",        `descr:"There are two levels of mailing..." ],
          "MOUSE"     :$[ `value:"/dev/psaux",  `descr:"Which device is the mouse?" ]
       ];

       After preprocess and merge with structerd info, the rc_config_keys contains also information about
       structured entrys

       for a "parent-nodey"   `descr and `dialogtype
       for a "leaf-node"      `dialogtype
       for a rc_config_key    `decr options and entrynb
       for all                `parent 
			      
////////////////////////////////////////////////////////////////////////////////

     structured info:
     
     from SCR
     list rc_config_eddb =
     [
       $[ `key:"LANGUAGE",          `property:"type", `value:"string" ], 
       $[ `key:"LANGUAGE",          `property:"path", `value:"/base" ],
       $[ `key:"LANGUAGE",          `property:"type", `value:"string" ],
       $[ `key:"ENABLE_SUSECONFIG", `property:"path", `value:"/base/suseconfig" ],
       $[ `key:"ENABLE_SUSECONFIG", `property:"type", `value:"boolean" ],
       ... 
     ]
    
////////////////////////////////////////////////////////////////////////////////

     the path hash:
     list rc_config_eddb_path =
     $[
       "LANGUAGE"         :"/base/lang"       ],
       "ENABLE_SUSECONFIG":"/base/suseconfig" ]
      ];
    
////////////////////////////////////////////////////////////////////////////////

*/

{
    Include (`rc_process_db() );
    Include (`rc_dialogs()    );

    
    ////////////////////////////////////////////////////////////
    // Testmode, for example fo screenshots
    boolean test_mode    = lookup ( user_settings, "test_mode", false );

    // todo change
    boolean lib_test_mode = true;
    
    ////////////////////////////////////////////////////////////
    // Read the current architecture (no architecture depended modes yet
    // string architecture = lookup( user_settings, "architecture", default_architecture);


    
    //////////////////////////////////////////////////////////////////////////////////////////////////
    /////                                    D E F I N E S                                       /////
    //////////////////////////////////////////////////////////////////////////////////////////////////

    define getDirDescr( string key )
    ``{
	  string|void descr = getDescr( key );

	  y2log( .milestone, "d", "1", descr);
	  if ( descr == nil || descr == "" ) descr = sformat(UI(_("Subdialog for %1")), key);
	  

	  return( descr );
      };

    
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //////                                       STATIC DATA                                       //////
    /////////////////////////////////////////////////////////////////////////////////////////////////////
 
    list rc_config_eddb =
    [
      $[ `key:"base",              `property:"path",        `value:"/" ], 
      $[ `key:"base",              `property:"type",        `value:"node" ], 
      $[ `key:"base",              `property:"descr",        `value:"Basic configuration parameter" ], 
      $[ `key:"LANGUAGE",          `property:"type",        `value:"enum", `list:["german","english"] ], 
      $[ `key:"LANGUAGE",          `property:"path",        `value:"/base/rr/sec/lang" ],
      $[ `key:"CHECK_ETC_HOSTS",          `property:"path",        `value:"/base/rr/sec/lang" ],
      $[ `key:"CHECK_ETC_HOSTS",          `property:"type",        `value:"boolean" ],
      $[ `key:"LANGUAGE",          `property:"type",        `value:"string" ],
      $[ `key:"KBD_TTY",           `property:"mtype",       `value:"enum", `list:["tty1","tty2"]],
      $[ `key:"ENABLE_SUSECONFIG", `property:"path",        `value:"/base2/suseconfig" ],
      $[ `key:"SUSECONFIG_OFF",    `property:"path",        `value:"/base/suseconfig" ],
      $[ `key:"SUSECONFIG_OFF",    `property:"mtype",       `value:"enum", `list:["xx","yy"]],
      $[ `key:"SUSECONFIG_OFF2",    `property:"path",        `value:"/base/suseconfig" ],
      $[ `key:"SUSECONFIG_OFF2",    `property:"mtype",       `value:"enum", `list:["xx","yy"]],
      $[ `key:"suseconfig",        `property:"path",        `value:"/base" ],
      $[ `key:"suseconfig",        `property:"dialogtype",  `value:"d3" ],
      $[ `key:"ENABLE_SUSECONFIG", `property:"type",        `value:"boolean" ]
      
    ];

    
    define xy2debug( string s) ``{ y2log(.milestone, "s", 1, s); };
    
    xy2debug ( "vor read eddb");
    list rc_config_eddb_raw = SCR( `Read( .suseconfig.meta_rc_config ));
    xy2debug ( "nach read eddb");

    rc_config_eddb = maplist( `entry, rc_config_eddb_raw, 
       ``{
	     string|void enum_list = lookup( entry, `list, nil );
	     if ( enum_list == nil )
	     {
		return( $[
			  `key     :lookup(entry, "key"),
			  `property:lookup(entry, "property"),
			  `value   :lookup(entry,"value")
		]);
	     }
	     else
	     {
		return( $[
			  `key     :lookup(entry, "key"),
			  `property:lookup(entry, "property"),
			  `value   :lookup(entry,"value"),
			  `list    :splitstring(enum_list, ",") 
		]);
	     }
       });
     xy2debug ( "nach ma eddb");
    
	     
   
   ///////////////////////////////////////////////////////////////////////////////////////////////////
   // Main helptext                                                                                 //
   //-----------------------------------------------------------------------------------------------//
   
    string help_text = "";

    // helptext  "main dialog edit rc_config_editor not show unitl now 
    help_text =  UI(_(""));

    
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //////                                       M A I N                                           //////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    
    /////////////////////////////////////////////////////////////////
    //  Read the list of all rc_config variables
    //  get the data of all varaiables and put them into the table
    ///////////////////////////////////////////////////////////////// 


     map  rc_config_keys = $[];
     list rc_dir         = SCR( `Dir( .rc ));

     y2debug ( "SCRRead");
 
     foreach( `dir, rc_dir,
     ``{
	 list rc_variables = SCR(`Dir(topath(sformat(".rc.%1", dir))));
	 
	 integer i=0;
	 while(  i < size(rc_variables) )
	 {
	     string key   = select( rc_variables, i);
	     string paths = sformat(".rc.%1.%2", dir, key);
	     
	     string descr = SCR( `Read(topath(sformat("%1.comment", paths))));
	     string value = SCR( `Read(topath(paths) ));
	     
	     change( rc_config_keys, key, $[`value:value,
					   `descr: descr,
					   `path:topath(sformat(".rc.%1.%2", dir, key))
	                                   ]
		    );
	     i=i+1; 
	 }
     });

     
    
     //////////////////////////////////////////////////////////////////////////////////
     // Lets build the main window ...
     //////////////////////////////////////////////////////////////////////////////////
     
     y2debug ( "vor  Merge");
     list tree_data =  process_eddb_create_widgettree_and_fill_rcconfigkeys();
     y2debug ( "nach Merge");

     rc_config_keys = rc_config_keys; 

     // Setting up the main window
     term main_window = getMainWindowTerm( tree_data );
    
     // translator: Main window header
     UI(`SetContents(_("Edit rc_config"), main_window, help_text, true, true ));

     // Initial Settings:
     term curr_dialog = getDirDialog( UI(_("<p>With this Editor, you can edit the variables in /etc/rc.config,
the central configuration file of your SuSE Linux<\p>")) + UI(_("<p>Please notice, that many of this variables are
set by specialized configuration modules like the \"Network configuration\"<\p>")));
     
     UI( `ChangeWidget(  `id(`next), `Label,  _("&Save") ) );
     UI( `ChangeWidget(  `id(`key),  `Tree,  tree_data));
     UI( `ReplaceWidget( `id(`rp),   curr_dialog ));

	      
     ///////////////////////////////////////////////////////////////////////////////////////////////////////////
     ////  Loop for User Input ....
     ///////////////////////////////////////////////////////////////////////////////////////////////////////////
     symbol ret              = `next;
     string dialogtype       = "";
     boolean descr_read       = true;
     boolean value_read       = true;
     
     repeat
     {
        ret= UI(`UserInput());

	if ( ret == `search )
	{
            //////////////////////////////////////////////////////////////////////////////////
	    // User has pushed the Search
            //////////////////////////////////////////////////////////////////////////////////
	    map|void search = UI(`SearchDlg());

	    if ( ret != nil )
	    {
		string search_str = lookup( search, "search");
		boolean ignore    = lookup( search, "ignore");
		boolean nkey      = lookup( search, "nkey");
		boolean nvalue    = lookup( search, "nvalue");
		boolean ndescr    = lookup( search, "ndescr");
		
		// AbC matches abc
                if ( ignore ) search_str = tolower( search_str );
		
		// The User want to serach fo the string "search_str"
		list  entry_list = maplist( `linekey, `line, rc_config_keys,
					    ``( add(line, `linekey, linekey )));

		if ( ignore )
		{
		   entry_list = filter(`entry, entry_list,
  	          ``(  ( ndescr && issubstring( tolower(lookup( entry, `descr,   "%%%")) , search_str ))
		    || ( nkey   && issubstring( tolower(lookup( entry, `linekey, "%%%")) , search_str ))
		    || ( nvalue && issubstring( tolower(lookup( entry, `value,   "%%%")) , search_str ))
		  ));
		}
		else
		{
		   entry_list = filter(`entry, entry_list,
  	          ``(  ( ndescr && issubstring( lookup( entry, `descr,   "%%%") , search_str ))
		    || ( nkey   && issubstring( lookup( entry, `linekey, "%%%") , search_str ))
		    || ( nvalue && issubstring( lookup( entry, `value,   "%%%") , search_str ))
		  ));
		}
		

		if ( size(entry_list) == 0)
		{
		    UI(`DisplayMessage(_("No entrys found")));
		}
		else
		{
		   string|void goto_key =  UI(`GotoDlg( entry_list));
		   
		   if ( goto_key != nil && goto_key != "" )
		   {
		      ////////////////////////////////////////////////////////////////////////////
		      // Now we have to switch to the Display, were the choosen item is in:
		      // is saved in the parent variable:
		      string toDisplayDialogKey = lookup( lookup( rc_config_keys, goto_key, $[] ), `parent, "" );
		      
		      if ( toDisplayDialogKey != "" )
		      {
			  UI( `ChangeWidget(`id(`key), `CurrentItem, toDisplayDialogKey ));
		      }
		   }
		}
	    }
	}
	else
	{
            //////////////////////////////////////////////////////////////////////////////////
	    // User has changed the tree  
            //////////////////////////////////////////////////////////////////////////////////
            
	    any key = UI(`QueryWidget(`id(`key), `CurrentItem));

	    /////////////////////////////////////////////////////////////////
	    // save Changes
 
            if ( dialogtype == "d1" ||  dialogtype == "d2" ||  dialogtype == "d3" ||
		 dialogtype == "d4" ||  dialogtype == "d5"                          )
	    {
	       integer max_item = tointeger(substring(dialogtype, 1));
	       integer i = 1;
	       while ( i <= max_item )
	       {
		  string new_val = UI(`QueryWidget(`id(sformat("%1_%2", dialogtype,i)), `Value));
		  string key     = UI(`QueryWidget(`id(sformat("%1_%2", dialogtype,i)), `Label));

		  y2log( .milestone, 1, "ttt", "TTTTTTTTTBB", key); 
		  
		  if ( lookup(lookup(rc_config_keys, key, $[]), `value) != new_val )
		  {
		     map curr_key = lookup(rc_config_keys, key);
		     curr_key     = add( curr_key, `value, new_val);
		     curr_key     = add( curr_key, `new,   true);

		     rc_config_keys = add( rc_config_keys, key, curr_key);
		  }
		  
		  // y2log( .milestone, 1, "ttt", "TTTTTTTTTBB", new_val); 
		  // y2log( .milestone, 1, "ttt", "TTTTTTTTTBB", new_lab); 
		  i=i+1;
	       }
	    }
	       
	    
            //////////////////////////////////////////////////////////////////
            // Look what the user has selected:
            // - curr_entry: selected ntree-nod in the DB
            // - dialogtype: type of the dialog, the treenode wants to display on the rigth side
            // - entry_list: list of all nodes of the DB which should be edited on the right dialog
            
            map    curr_entry        = lookup( rc_config_keys, key, $[]  );
                   dialogtype        = lookup( curr_entry, `dialogtype, "none" );
            list   entry_list        = maplist( `linekey, `line, rc_config_keys,
						``( add(line, `linekey, linekey )));
	    
            entry_list               = filter(  `entry, entry_list, ``( lookup( entry, `parent, "" ) == key ));
	    
            y2debug("dialogtype %1", dialogtype);
	    
            if ( dialogtype == "d1" )
            {
            	term curr_dialog = getD1Dialog( entry_list );
            	UI(`ReplaceWidget(`id(`rp), curr_dialog));
		
            }
            else if ( dialogtype == "d2" )
            {
            	term curr_dialog = getD2Dialog( entry_list );
            	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d3" )
            {
            	term curr_dialog = getD3Dialog( entry_list );
            	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d4" )
            {
            	term curr_dialog = getD4Dialog( entry_list );
            	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d5" )
            {
            	term curr_dialog = getD5Dialog( entry_list );
            	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "dir" )
            {
            	term curr_dialog = getDirDialog( getDirDescr( key));
            	UI(`ReplaceWidget(`id(`rp), curr_dialog ));
            }
        }   

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////  
        ////////////////////////////////////////////////////////////////////////////////////////////////////////

        if (ret == `next || ret == `language || ret == `back)
        {
            if ( ret == `next )
            {
	       //////////////////////////////////////////////////////////////////////////////////
	       // User want to save Data
	       //////////////////////////////////////////////////////////////////////////////////
		
	        list  changes_list = maplist( `linekey, `line, rc_config_keys,``( add(line, `linekey, linekey )));
		changes_list       = filter(`entry, changes_list, ``( lookup(entry, `new, false) == true ));

		string|void save_val = UI(`SaveDlg( changes_list));

	        if (save_val == nil)
	        {
   	           // Cancel:
	           ret = `again;
	        }
	        else
	        {
	           // Doit:
	           maplist( `entry, changes_list, ``(SCR( `Write(lookup(entry, `path), lookup(entry, `value)))));
	           return( `next );
	        }
            }

            if ( ret == `back )
            {
                 UI(`ChangeWidget(`id(`next), `Label,  _("&Next") ) );
            }

            if ( ret != `back )
            {
                if (ret == `apply) return `again;
            }
        }

  } until (ret == `next || ret == `back || ret == `cancel);

   return ret;

}



