/**
 * File:	clients/sysconfig.ycp
 * Module:	Editor for /etc/sysconfig
 * Summary:	Dialogs
 * Authors:	Michael Hager <mike@suse.de>
 *
 * $Id$
 *

////////////////////////////////////////////////////////////////////////////////

    namespace:

    read, the next few lines, then you know what I mean with:
    - "parent-nodes"
    - "leaf-nodes"

    In rc_config editor you see on the left a "tree widget" and on the right a "dialog".
    In the "tree widget" you have nodes, you can collaps or expand, that are "parent-nodes"
    Nodes which are "leafs" of the tree, which you can not expand, are the "leaf-nodes",
    If you click at this leaf-nodes, a editable dialog on the rigth will appear, in which
    you can edit rc_config-values.


////////////////////////////////////////////////////////////////////////////////

    data structure for internal use:
    Example internal data structure of all rc_config KEYs:

    list rc_config_keys =

       map rc_config_keys =
       $[ "MAIL_LEVEL":$[  `value:"warn",        `descr:"There are two levels of mailing..." ],
          "MOUSE"     :$[ `value:"/dev/psaux",  `descr:"Which device is the mouse?" ]
       ];

       After preprocess and merge with structerd info, the rc_config_keys contains also information about
       structured entrys

       for a "parent-nodey"   `descr and `dialogtype
       for a "leaf-node"      `dialogtype
       for a rc_config_key    `decr options and entrynb
       for all                `parent

////////////////////////////////////////////////////////////////////////////////

     structured info:

     from SCR
     list rc_config_eddb =
     [
       $[ `key:"LANGUAGE",          `property:"type", `value:"string" ],
       $[ `key:"LANGUAGE",          `property:"path", `value:"/base" ],
       $[ `key:"LANGUAGE",          `property:"type", `value:"string" ],
       $[ `key:"ENABLE_SUSECONFIG", `property:"path", `value:"/base/suseconfig" ],
       $[ `key:"ENABLE_SUSECONFIG", `property:"type", `value:"boolean" ],
       ...
     ]

////////////////////////////////////////////////////////////////////////////////

     the path hash:
     list rc_config_eddb_path =
     $[
       "LANGUAGE"         :"/base/lang"       ],
       "ENABLE_SUSECONFIG":"/base/suseconfig" ]
      ];

////////////////////////////////////////////////////////////////////////////////

*/

{

    textdomain "sysconfig";

    UI(`ChangeWidget(`id(`package),   `Value, 20));
    include "sysconfig/sys_dialogs.ycp";

    ////////////////////////////////////////////////////////////
    // Testmode, for example fo screenshots
    boolean test_mode    = lookup ( user_settings, "test_mode", false );

    // todo change
    boolean lib_test_mode = true;

    ////////////////////////////////////////////////////////////
    // Read the current architecture (no architecture depended modes yet
    // string architecture = lookup( user_settings, "architecture", default_architecture);


    //////////////////////////////////////////////////////////////////////////////////////////////////
    /////                                    D E F I N E S                                       /////
    //////////////////////////////////////////////////////////////////////////////////////////////////

    global define getDirDescr( string key )
    ``{
	  string descr = getDescr( key );

	  if ( descr == nil || descr == "" )
	      {
		  descr = UI(_("<p></p>"))+
		      sformat(UI(_("<p><b>Subdialog for %1</b></p>")),key) +
		      UI(_("<p>The configuration in this section is not yet organized.</p>"));
	      }

	  return( descr );
      };


    //////////////////////////////////////////////////////////////////////////////////
    // sync the dynamically mounted agents (/etc/sysconfig)
    // Mount dynamically an etc/sysconfig/* agent
    //////////////////////////////////////////////////////////////////////////////////

    list registered_list = [];

    global define sync_sysconfig()
    ``{
	foreach( `entry, registered_list, ``{
	    y2debug("Sync %1", entry );
	    SCR::Write( entry, nil);
	});
    };

    global define write_value( path   key,                                     //  .etc.sysconfig.network.dhcpcd.IP
			       string value )                                    //  "10.10.0.12"
    ``{

	list    path_list   = splitstring( "" + key, "." );                 // ["", "etc", "sysconfig", "network", "dhcpcd"]
	string  variable    = select( path_list, size(path_list)-1, "");
	path_list           = remove( path_list, size(path_list)-1);
	string  path_string = mergestring( path_list, "." );                      // ".etc.sysconfig.network.dhcpcd"
	path    path_path   = topath( path_string );                              //  .etc.sysconfig.network.dhcpcd
	string  path_slash  = mergestring(splitstring( path_string, "."), "/");   // "/etc/sysconfig/network/dhcpcd"

	if ( regexpmatch( path_slash, ".*rc/config.*" ) )
	{
           path_slash = regexpsub( path_slash, "(.*)rc/config(.*)",  "\\1rc.config\\2" );
	}

	if ( !contains(registered_list, path_path))
	{
	    y2debug("REGISTER____________________________ %1", path_path);
	    string tmp = SCR::Read(.target.tmpdir);
	    if (tmp == nil || tmp == "") tmp = "/tmp";

	    tmp = tmp + "/_" + path_string + ".scr";

	    string scrfile = path_string + "\n" + "`ag_ini( SysConfigFile(\"" + path_slash + "\"))\n";


	    SCR::Write (.target.string, tmp, scrfile);
	    SCR::RegisterAgent(path_path, tmp);
	    registered_list = add( registered_list, path_path );
	    y2debug("Registered: %1", registered_list );
	}

	SCR::Write( topath(path_string + "." + variable), value);
    };


    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //////                                       STATIC DATA                                       //////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    // show processing steps ...
    UI(`ChangeWidget(`id(`package),   `Value, 50));

    string rc_create_command = "";
    string rc_config_file    = "";
    string tree_data_file    = "";

    if ( firewall_mode )
    {
       rc_create_command = "/usr/lib/YaST2/bin/syscreate_data -f";
       rc_config_file    = "fw_config_keys" ;
       tree_data_file    = "fw_tree_data";
    }
    else
    {
       rc_create_command = "/usr/lib/YaST2/bin/syscreate_data";
       rc_config_file    = "rc_config_keys" ;
       tree_data_file    = "tree_data";
    }


    // Execute the binary to create all neccesary data for the editor.
    SCR (`Execute(.target.bash, rc_create_command, $[]));

    // show processing steps ...
    UI(`ChangeWidget(`id(`package),   `Value, 70));

    // One output of the binary is the rc_config_keys map,
    map  rc_config_keys = $[];
    //rc_config_keys = ReadY2("rc_config_keys");
    rc_config_keys = SCR(`Read(.target.yast2, rc_config_file ));
    //    SCR(`Write (.dumpto.tmp.rc_config_keys_1, rc_config_keys ));

    // show processing steps ...
    UI(`ChangeWidget(`id(`package),   `Value, 90));

    // the other output is the tree_data list.
    //list tree_data =  ReadY2("tree_data");
    list tree_data = SCR(`Read(.target.yast2, tree_data_file));
    //    SCR(`Write (.dumpto.tmp.tree_data, tree_data ));

    // show processing steps ...
    UI(`ChangeWidget(`id(`package),   `Value, 100));

   ///////////////////////////////////////////////////////////////////////////////////////////////////
   // Main helptext                                                                                 //
   //-----------------------------------------------------------------------------------------------//


    // helptext  "main dialog edit rc_config_editor not show unitl now
    string help_text = "";


    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //////                                       M A I N                                           //////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////////////
    // Lets build the main window ...
    //////////////////////////////////////////////////////////////////////////////////

     // Setting up the main window
     term main_window = getMainWindowTerm( tree_data );

     // translator: Main window header
     if ( firewall_mode )
     {
        UI(`SetContents(_("Edit firewall configuration"), main_window, help_text, true, true ));
     }
     else
     {
	 UI(`SetContents(_("Edit sysconfig variables"), main_window, help_text, true, true ));
     }

     // Initial Settings:
     term curr_dialog = `dummy();

     if ( firewall_mode )
     {
        curr_dialog = getDirDialog( UI(_("<p><b>SuSEfirewall2</b> and <b>SuSEpersonal-firewall</b> are two independent packet filter
concepts and implementations for SuSE Linux systems. Select the package
that best suits your needs:</p>
<p><b>SuSEpersonal-firewall</b><br> for a home-solution, easy and simple
to set up</p>
<p><b>SuSEfirewall2</b><br> for a flexible, but more complex configuration.</p>
<br>
<p><b>Warning:</b><br>Incorrect configuration of packet filters may cause a false sense
of security. If unsure, use the SuSEpersonal-firewall. The SuSEfirewall2
requires the linux kernel 2.4 to run.</p>")));
     }
     else
     {
	 curr_dialog = getDirDialog( UI(_("<p>With this editor, edit the variables in /etc/sysconfig configfiles.</p>
")) + UI(_("<p>
Many of these variables are set by specialized YaST2
configuration modules like the \"Network configuration\".</p>
")));
     }



     UI( `ChangeWidget(  `id(`next), `Label,  _("S&ave") ) );
     UI( `ChangeWidget(  `id(`key),  `Tree,  tree_data));
     UI( `ReplaceWidget( `id(`rp),   curr_dialog ));


     ///////////////////////////////////////////////////////////////////////////////////////////////////////////
     ////  Loop for User Input ....
     ///////////////////////////////////////////////////////////////////////////////////////////////////////////
     symbol ret              = `next;
     string dialogtype       = "";
     boolean descr_read       = true;
     boolean value_read       = true;

     y2debug("12");
     repeat
     {
        ret= UI(`UserInput());

	if ( ret == `help )
	{
            //////////////////////////////////////////////////////////////////////////////////
	    // User has pushed the HELP
            //////////////////////////////////////////////////////////////////////////////////
	    UI(`HelpDlg());
	}
	else if ( ret == `search )
	{
            //////////////////////////////////////////////////////////////////////////////////
	    // User has pushed the Search
            //////////////////////////////////////////////////////////////////////////////////
	    map search = UI(`SearchDlg());

	    if ( search != nil )
	    {
		string search_str = lookup( search, "search", "");
		boolean ignore    = lookup( search, "ignore", false );
		boolean nkey      = lookup( search, "nkey",   false );
		boolean nvalue    = lookup( search, "nvalue", false );
		boolean ndescr    = lookup( search, "ndescr", false );

		// AbC matches abc
                if ( ignore ) search_str = tolower( search_str );

		// The User want to serach fo the string "search_str"
		list  entry_list = maplist( `linekey, `line, rc_config_keys,
					    ``( add(line, `linekey, linekey )));

		if ( ignore )
		{
		   entry_list = filter(`entry, entry_list,
	          ``(  ( ndescr && issubstring( tolower(lookup( entry, `descr,   "%%%")) , search_str ))
		    || ( nkey   && issubstring( tolower(lookup( entry, `linekey, "%%%")) , search_str ))
		    || ( nvalue && issubstring( tolower(lookup( entry, `value,   "%%%")) , search_str ))
		  ));
		}
		else
		{
		   entry_list = filter(`entry, entry_list,
	          ``(  ( ndescr && issubstring( lookup( entry, `descr,   "%%%") , search_str ))
		    || ( nkey   && issubstring( lookup( entry, `linekey, "%%%") , search_str ))
		    || ( nvalue && issubstring( lookup( entry, `value,   "%%%") , search_str ))
		  ));
		}


		if ( size(entry_list) == 0)
		{
		    UI(`DisplayMessage(_("No entries found")));
		}
		else
		{
		   string goto_key =  UI(`GotoDlg( entry_list));

		   if ( goto_key != nil && goto_key != "" )
		   {
		      ////////////////////////////////////////////////////////////////////////////
		      // Now we have to switch to the Display, were the choosen item is in:
		      // is saved in the parent variable:
		      string toDisplayDialogKey = lookup( lookup( rc_config_keys, goto_key, $[] ), `parent, "" );

		      if ( toDisplayDialogKey != "" )
		      {
			  UI( `ChangeWidget(`id(`key), `CurrentItem, toDisplayDialogKey ));
		      }
		      else
		      {
			  UI( `ChangeWidget(`id(`key), `CurrentItem, goto_key ));
		      }
		   }
		}
	    }
	}
	else
	{
            //////////////////////////////////////////////////////////////////////////////////
	    // User has changed the tree
            //////////////////////////////////////////////////////////////////////////////////

	    any key = UI(`QueryWidget(`id(`key), `CurrentItem));

	    /////////////////////////////////////////////////////////////////
	    // save Changes
	    y2milestone( "TTTTTTTTT");

            if ( dialogtype == "d1" ||  dialogtype == "d2" ||  dialogtype == "d3" ||
		 dialogtype == "d4" ||  dialogtype == "d5"                          )
	    {
	        y2milestone( "TTTTBB");
	       integer max_item = tointeger(substring(dialogtype, 1));
	       integer i = 1;
	       while ( i <= max_item )
	       {
		  string new_val = UI(`QueryWidget(`id(sformat("%1_%2", dialogtype,i)), `Value));
		  string key     =  deletechars( UI(`QueryWidget(`id(sformat("%1_%2", dialogtype,i)), `Label)), "&");

		  if ( lookup(lookup(rc_config_keys, key, $[]), `value, nil) != new_val )
		  {
		     map curr_key = lookup(rc_config_keys, key, nil);
		     y2milestone( "jTTTTTTTTTBB: %1", curr_key);
		     curr_key     = add( curr_key, `value, new_val);
		     curr_key     = add( curr_key, `new,   true);
		     y2milestone( "jTTTTTTTTTBB: %1", curr_key);

		     rc_config_keys = add( rc_config_keys, key, curr_key);
		  }

		  y2milestone( "TTTTTTTTTBB: %1", new_val);
		  y2milestone( "TTTTTTTTTBB: %1", key);
		  i=i+1;
	       }
	    }


            //////////////////////////////////////////////////////////////////
            // Look what the user has selected:
            // - curr_entry: selected ntree-nod in the DB
            // - dialogtype: type of the dialog, the treenode wants to display on the rigth side
            // - entry_list: list of all nodes of the DB which should be edited on the right dialog

            map    curr_entry        = lookup( rc_config_keys, key, $[]  );
                   dialogtype        = lookup( curr_entry, `dialogtype, "none" );
            list   entry_list        = maplist( `linekey, `line, rc_config_keys,
						``( add(line, `linekey, linekey )));

            entry_list               = filter(  `entry, entry_list, ``( lookup( entry, `parent, "" ) == key ));

            y2debug("dialogtype %1", dialogtype);

            if ( dialogtype == "d1" )
            {
	term curr_dialog = getD1Dialog( entry_list );
	UI(`ReplaceWidget(`id(`rp), curr_dialog));

            }
            else if ( dialogtype == "d2" )
            {
	term curr_dialog = getD2Dialog( entry_list );
	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d3" )
            {
	term curr_dialog = getD3Dialog( entry_list );
	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d4" )
            {
	term curr_dialog = getD4Dialog( entry_list );
	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "d5" )
            {
	term curr_dialog = getD5Dialog( entry_list );
	UI(`ReplaceWidget(`id(`rp), curr_dialog));
            }
            else if ( dialogtype == "dir" )
            {
	term curr_dialog = getDirDialog( getDirDescr( key));
	UI(`ReplaceWidget(`id(`rp), curr_dialog ));
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////
        ////
        ////////////////////////////////////////////////////////////////////////////////////////////////////////

        if (ret == `next || ret == `language || ret == `back)
        {
            if ( ret == `next )
            {
	       //////////////////////////////////////////////////////////////////////////////////
	       // User want to save Data
	       //////////////////////////////////////////////////////////////////////////////////

	        list  changes_list = maplist( `linekey, `line, rc_config_keys,``( add(line, `linekey, linekey )));
		changes_list       = filter(`entry, changes_list, ``( lookup(entry, `new, false) == true ));

		any save_val = UI(`SaveDlg( changes_list));

	        if (save_val == `cancel)
	        {
	           // Cancel:
	           ret = `again;
	        }
		else if( save_val == nil )
		{
		    // empty table in save dialog and button "ok" was pushed
		    // leave module
		    ret = `cancel;
		}
	        else
		{
		    // Doit new:

		    // this list contains all rc_file paths, that must be saved before starting SuSEconfig
		    list rc_file_list = [];

		    list ret_list = maplist( `entry, changes_list, ``{
			write_value(lookup(entry, `path, nil), lookup(entry, `value, nil));
		    });

		    sync_sysconfig();
		    y2milestone("Starting config scripts");


		    any ret = 0;
		    if ( firewall_mode )
		    {
			UI(`WaitRestartFirewall());
			SCR(`Execute(.target.bash, "echo /sbin/rcSuSEfirewall2 restart2 >/var/log/firewall.log 2>&1"));
			SCR(`Execute(.target.bash, "/sbin/rcSuSEfirewall2 restart2 >>/var/log/firewall.log 2>&1"));
			SCR(`Execute(.target.bash, "echo /usr/sbin/rcpersonal-firewall start >>/var/log/firewall.log 2>&1"));
			SCR(`Execute(.target.bash, "/usr/sbin/rcpersonal-firewall start >>/var/log/firewall.log 2>&1"));
			UI(`CloseDialog());
		    }
		    else
		    {
			//UI(`WaitSuSEconfig());
		        CallFunction( `inst_suseconfig( false, false ) );
			//ret = SCR(`Execute(.target.bash, "/sbin/SuSEconfig >/var/log/SuSEconfig.log 2>&1"));
			//UI(`CloseDialog());
		    }

		    return( `next );
	        }
            }

            if ( ret == `back )
            {
                 UI(`ChangeWidget(`id(`next), `Label,  _("&Next") ) );
            }

            if ( ret != `back )
            {
                if (ret == `apply) return `again;
            }
        }

  } until (ret == `next || ret == `back || ret == `cancel);

   return ret;

}
