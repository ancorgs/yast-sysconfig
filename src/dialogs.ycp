/**
 * File:	include/sysconfig/dialogs.ycp
 * Package:	Configuration of sysconfig
 * Summary:	Dialogs definitions
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 */

{

textdomain "sysconfig";

import "Sysconfig";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "sysconfig/helps.ycp";
include "sysconfig/routines.ycp";

/**
 * Display search dialog
 * @return map Search option values selected in the dialog
 */
global define map display_search_dialog()
``{
    // helptext for popup search
    string helptextCR = _("Enter a keyword related to the information needed.");

    UI::OpenDialog( `opt(`decorated ),
		`VBox(`HSpacing(60),
		    // search popup window header
		      `Heading(_("Search for a configuration variable")),
		      `VSpacing(0.5),
		      `HBox(`VSpacing(10),
			    `RichText( helptextCR ),
			    `HSpacing(2),
			    `VBox(
				`VSpacing(1),
				// text entry label
				`TextEntry(`id(`search_entry), _("&Search for:")),
				`VSpacing(1),
				// check box label
				`Left(`CheckBox(`id(`ignore), _("&Case insensitive search"), true)),
				// check box label
				`Left(`CheckBox(`id(`nkey), _("Search &variable name"), true)),
				// check box label
				`Left(`CheckBox(`id(`ndescr), _("Search &description"), true)),
				// check box label
				`Left(`CheckBox(`id(`nvalue), _("Search &value"), false)),
				`VSpacing(1)
				),
			    `HSpacing(2)
			  ),
		      `VSpacing(0.5),
		      `HBox(
			  // push button label
			  `PushButton(`id(`ok), `opt(`default, `key_F10), OKButtonLabel()),
			  // push button label
			  `PushButton(`id(`cancel), `opt(`key_F9), CancelButtonLabel())
			  )
		    )
	);

    UI::SetFocus(`id(`search_entry));

    symbol ui = UI::UserInput();

    while (ui != `ok && ui != `cancel)
    {
	ui = UI::UserInput();
    }

    map ret = $[];

    if (ui == `ok)
    {
	ret = add(ret, "search", UI::QueryWidget(`id(`search_entry), `Value));
	ret = add(ret, "insensitive", UI::QueryWidget(`id(`ignore), `Value));
	ret = add(ret, "varname", UI::QueryWidget(`id(`nkey), `Value));
	ret = add(ret, "value", UI::QueryWidget(`id(`nvalue), `Value));
	ret = add(ret, "description", UI::QueryWidget(`id(`ndescr), `Value));
    }

    UI::CloseDialog();
    return ret;
}

/**
 * Display dialog with selected variables
 * @param header Heading in the dialog
 * @param label Label in the dialog
 * @param table_content Table content list
 * @param ok_label OK button label
 * @param cancel_label Cancel button label
 * @return map Selected variable and user input values
 */
global define map display_variables_dialog(string header, string label, list table_content, string ok_label, string cancel_label) ``{

    UI::OpenDialog(`opt(`decorated),
	`HBox(
	    `VSpacing(17),
	    `VBox(`HSpacing(70),
		//heading of popup
		`Heading(header),
		`Label(label),
		`VSpacing(0.5),

		// table column header
		`Table(`id(`table),`header(_("Name"), _("NEW VALUE"), _("Old value"), _("File"), _("Description")), table_content),
    `VSpacing(0.5),
		`HBox(
		    // push button label
		    `PushButton(`id(`action), `opt(`default, `key_F10), ok_label),
		    // push button label
		    `PushButton(`id(`cancel), `opt(`key_F9), cancel_label)
		)
	    )
        )
    );

    symbol ret = UI::UserInput();
    string selected = UI::QueryWidget(`id(`table), `CurrentItem);

    UI::CloseDialog();

    return $[ "ui" : ret, "selected" : selected ];
}

/**
 * Display dialog - ask user to install powertweak packages
 * @return map User input and powertweak-extra package selection value
 */
global define map powertweak_install_dialog() ``{

    // question displayed in popup dialog
    string helptext = _("This module requires package \"powertweak\", do you want to install it?\n\nClick \"Install\" to install packages and start module or click \"Cancel\" to quit without any change.\nPackage \"powertweak-extra\" extends configuration options of powertweak package.");

    UI::OpenDialog(`opt(`decorated),
	`VBox(
	    // popup dialog header
	    `Heading(_("Install powertweak package?")),
	    `VSpacing(1),
	    `Label(helptext),
	    `VSpacing(1),
	    // check box label text
	    `Left(`CheckBox(`id(`extra), _("Install powertweak-&extra package"), true)),
	    `VSpacing(1),
	    `HBox(
		`PushButton(`id(`ok), `opt(`key_F10), InstallButtonLabel()),
		`PushButton(`id(`cancel), `opt(`key_F9), CancelButtonLabel())
	    )
	)
    );

    symbol ui = UI::UserInput();
    boolean extra = UI::QueryWidget(`id(`extra), `Value);

    UI::CloseDialog();

    return $[ "ui" : ui, "extra" : extra ];
}

/**
 * Display dialog for new variable. This dialog is used at autoinstalation config mode
 * only - some packages may not be available at configure time, but they will be present
 * at installation, so it is possible to change them even if they are not displayed.
 * @return map Map with keys "ui" (`ok or `cancel - user input), "name" (name of
 * the new variable), "file" (location of variable) and "value" (value to write)
 */
global define map add_new_variable()
``{
    UI::OpenDialog(`opt(`decorated),
	`VBox(
	    `HBox(
		// text entry label
		`TextEntry(`id(`name), _("&Variable name"), ""),
		// text entry label
		`TextEntry(`id(`value), _("V&alue"), "")
	    ),
	    `VSpacing(1),
	    `HBox(
		// text entry label
		`TextEntry(`id(`file), _("&File name"), "")
	    ),
	    `VSpacing(1),
	    `HBox(
		`PushButton(`id(`ok), `opt(`key_F10), OKButtonLabel()),
		`PushButton(`id(`cancel), `opt(`key_F9), CancelButtonLabel())
	    )
	)
    );

    symbol ui = nil;

    string name = "";
    string file = "";

    while(ui != `ok && ui != `cancel)
    {
	ui = UI::UserInput();

	name = UI::QueryWidget(`id(`name), `Value);
	file = UI::QueryWidget(`id(`file), `Value);

	if (ui == `ok)
	{
	    if (name == "")
	    {
		// warning popup message - variable name is empty
		UI::WarningPopup(_("Missing variable name value!"));
		ui = nil;
	    }
	    else if (size(file) <= 1)
	    {
		// warning popup message - file name is empty
		UI::WarningPopup(_("Missing file name value!"));
		ui = nil;
	    }
	    else if (substring(file, 0, 1) != "/")
	    {
		// warning popup message - file name is required with absolute path
		UI::WarningPopup(_("Missing absolute path in file name!"));
		ui = nil;
	    }
	}
    }

    string value = UI::QueryWidget(`id(`value), `Value);

    UI::CloseDialog();

    return $[ "ui" : ui, "name" : name, "value" : value, "file" : file ];
}

/* EOF */
}
