/**
 * File:	include/sysconfig/complex.ycp
 * Package:	Configuration of sysconfig
 * Summary:	Dialogs definitions
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 */

{

textdomain "sysconfig";

import "Wizard";
import "Sysconfig";
import "Runlevel";
import "Directory";
import "Mode";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "sysconfig/helps.ycp";
include "sysconfig/routines.ycp";

/**
 * current selected variable in the tree widget
 */
global string selected_variable = "";

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Sysconfig::Modified();
}


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(Sysconfig::powertweak_mode ? HELPS["read_powertweak"]:"" : HELPS["read"]:"");

    string powertweakconfig = "/etc/powertweak/tweaks";

    if (Sysconfig::powertweak_mode == true)
    {
	// do not ask user to create powertweak configuration file
	// after package installation - suppose "yes"
	boolean just_installed = false;

	y2debug("Powertweak MODE");

	if (SCR::Read(.target.size, "/usr/sbin/powertweakd") < 0)
	{
	    // include require.ycp only when it is really needed,
	    // because it starts package manager
	    include "require.ycp";

	    y2warning("Package powertweak is not installed");

	    // ask user to install powertweak package
	    map ask = powertweak_install_dialog();

	    if (ask["ui"]:`cancel == `cancel)
	    {
		return `abort;
	    }

	    // install powertweak package

	    list(string) install = [ "powertweak" ];

	    if (ask["extra"]:false == true)
	    {
		install = add(install, "powertweak-extra");
	    }

	    just_installed = DoInstallAndRemove(install, []);

	    if (just_installed == false)
	    {
		UI::ErrorPopup(_("Package installation failed\nPress OK to exit"));
		return `abort;
	    }
	}

	y2debug("Installed packages: just_installed=%1", just_installed);

	if (SCR::Read(.target.size, powertweakconfig) == -1 || SCR::Read(.target.size, powertweakconfig) == 0)
	{
	    // popup dialog question
	    if (just_installed == true || UI::AnyQuestionPopup("", _("Powertweak configuration file does not exist.
Create it and use powerteak?
"), YesButtonLabel(), NoButtonLabel(), `focus_no) == true)
	    {
		// create powertweak config
		integer exit = SCR::Execute(.target.bash, "/usr/sbin/powertweakd --no-daemon --only-save");

		if (exit != 0)
		{
		    y2warning("Powertweak exit code: %1", exit);
		    // warning popup message
		    UI::WarningPopup(_("Powertweak failed: configuration file may be missing or broken"));
		}
	    }
	    else
	    {
		return `abort;
	    }
	}
    }

    // read only powerteak config or all sysconfig files
   if (Sysconfig::powertweak_mode == true)
   {
       Sysconfig::Read([powertweakconfig]);
   }
   else
   {
       Sysconfig::Read(Sysconfig::configfiles);
   }

    return `next;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(Sysconfig::powertweak_mode ? HELPS["write_powertweak"]:"" : HELPS["write"]:"");

    boolean ret = true;

    if (Sysconfig::Modified() == true)
    {
	// write and activate changes
	Sysconfig::Write();
    }

    return `next;
}

/**
 * Create rich text description string from description values
 * @param description Description
 * @return string Rich text string
 */
global define string create_richtext_description(map description) ``{
    string varname = description["name"]:"";
    string file = description["file"]:"";
    string default_value = description["Default"]:nil;
    string comment = description["comment"]:"";

    string possible_vals = possible_values(description);

    string result = "";

    if (file != "" && file != nil)
    {
	// rich text item
	result = result + "<P><B>" + _("File: ") + "</B> " + file + "</P>";
    }

    if (possible_vals != "" && possible_vals != nil)
    {
	// rich text item
	result = result + "<P><B>" + _("Possible Values: ") + "</B> " + possible_vals + "</P>";
    }

    if (default_value != nil && size(file) > 0)
    {
	// quote empty value
	if (default_value == "")
	{
	    default_value = "\"\"";
	}
	// rich text value
	result = result + "<P><B>" + _("Default Value: ") + "</B> " + default_value + "</P>";
    }

    // if value was modified add original value
    if (haskey(description, "new_value"))
    {
	string original = description["value"]:"";

	// quote empty value
	if (original == "")
	{
	    original = "\"\"";
	}
	// rich text value
	result = result + "<P><B>" + _("Original Value: ") + "</B> " + original + "</P>";
    }

    if (comment != "" && comment != nil)
    {
	// convert '<' and '>' to '&lt;' '&gt;'
	comment = mergestring(splitstring(comment, "<"), "&lt;");
	comment = mergestring(splitstring(comment, ">"), "&gt;");

	// keep comment formatting:
	// convert '\n' => '<BR>'
	comment = mergestring(splitstring(comment, "\n"), "<BR>");

	// do not change node descriptions
	if (file != "")
	{
	    // convert ' ' => '&nbsp;'
	    comment = mergestring(splitstring(comment, " "), "&nbsp;");
	}

	y2debug("formatted comment: %1", comment);

	// rich text value
	result = result + "<P><B>" + _("Description: ") + "</B><BR> " + comment + "</P>";
    }

    return result;
}

/**
 * Get combo box editable status - depends on Type value
 * @param description Description of variable
 * @return boolean True if combo box should be editable
 */
global define boolean combo_editable(map description) ``{
    string type = description["Type"]:"";

    return (type == "" || regexpmatch(type, "^integer\\(.*:.*\\)$") || type == "integer"
	|| type == "string" || regexpmatch(type, "^string\\(.*\\)$") || type == "ip"
	|| regexpmatch(type, "^regexp\\(.*\\)$"));
}

/**
 * Generic list function - add value to the list if it isn't already there
 * @param l Input list
 * @param v Input value
 * @return list List with value v
 */
global define list add_if_missing(list l, string v) ``{
    return (!contains(l, v)) ? add(l, v) : l;
}

/**
 * Escape double quotes and back slash characters by back slash
 * @param input String to escape
 * @return Escaped string
 */
global define string backslash_add(string input) ``{

    // escape double quotes and back slashes
    string escaped = "";
    integer pos = 0;

    while (pos < size(input))
    {
	string ch = substring(input, pos, 1);

	if (ch == "\\")
	{
	    escaped = escaped + "\\\\";
	}
	else
	{
	    if (ch == "\"")
	    {
		escaped = escaped + "\\\"";
	    }
	    else
	    {
		escaped = escaped + ch;
	    }
	}

	pos = pos + 1;
    }

    return escaped;
}

/**
 * Remove backslashes from string - opposite funtion to the backslash_add function.
 * @param input Escaped string
 * @return string String without escape chars
 */
global define string backslash_remove(string input) ``{

    if (input == nil)
    {
	return nil;
    }

    string  ret = "";
    integer index = 0;
    boolean backslash = false;

    while (index < size(input))
    {
	string ch = substring(input, index, 1);

	if (backslash == false)
	{
	    if (ch == "\\")
	    {
		backslash = true;
	    }
	    else
	    {
		ret = ret + ch;
	    }
	}
	else
	{
	    ret = ret + ch;
	    backslash = false;
	}

	index = index + 1;
    }

    return ret;
}

/**
 * Create list of values for combo box widget
 * @param description Variable description
 * @param set_default If true add default value to the list
 * @return list List of values for combo box widget
 */
global define list combo_list(map description, boolean set_default) ``{
    string new_value = backslash_remove(description["new_value"]:nil);
    string value = backslash_remove(description["value"]:"");
    list ret = [];

    if (set_default == true)
    {
	string def = description["Default"]:nil;

	if (def != nil)
	{
	    if (!contains(ret, def)) ret = add(ret, def);
	}
    }

    if (new_value != nil)
    {
	if (!contains(ret, new_value)) ret = add(ret, new_value);
    }
    else if (value != nil)
    {
	if (!contains(ret, value)) ret = add(ret, value);
    }

    string deflt = description["Default"]:nil;

    if (deflt != nil)
    {
	list parsed = Sysconfig::ParseString(deflt, Sysconfig::parse_param);
	deflt = parsed[0]:deflt;
    }

    string type = description["Type"]:"";

    if (type == "yesno")
    {
	if (!contains(ret, "yes")) ret = add(ret, "yes");
	if (!contains(ret, "no")) ret = add(ret, "no");
    }
    else if (type == "boolean")
    {
	if (!contains(ret, "true")) ret = add(ret, "true");
	if (!contains(ret, "false")) ret = add(ret, "false");
    }
    else if (regexpmatch(type, "^list\\(.*\\)"))
    {
	string values_string = regexpsub(type, "^list\\((.*)\\)", "\\1");
	list(string) parsed = Sysconfig::ParseString(values_string, Sysconfig::parse_param);

	// add missing items
	foreach(string option, parsed,
	    ``{
		if (!contains(ret, option)) ret = add(ret, option);
	    }
	);
    }
    else if (regexpmatch(type, "^string\\(.*\\)"))
    {
	string values_string = regexpsub(type, "^string\\((.*)\\)", "\\1");
	list(string) parsed = Sysconfig::ParseString(values_string, Sysconfig::parse_param);

	// add missing items
	foreach(string option, parsed,
	    ``{
		if (!contains(ret, option)) ret = add(ret, option);
	    }
	);
    }

    // add default value to the list
    if (deflt != nil && !contains(ret, deflt)) ret = add(ret, deflt);

    // add old value to the list if variable was modified
    if (new_value != nil)
    {
	if (!contains(ret, value)) ret = add(ret, value);
    }

    y2debug("combo list: %1", ret);

    return ret;
}

/**
 * Get string representation of type definition. Used at richtext description.
 * @param description Variable description
 * @return string Textual description of the type
 */
global define string possible_values(map description) ``{
    string ret = "";

    string type = description["Type"]:"";

    if  (type == "")
    {
	return ret;
    }
    else if (type == "yesno")
    {
	ret = ret + "yes,no";
    }
    else if (type == "boolean")
    {
	ret = "true,false";
    }
    else if (regexpmatch(type, "^list\\(.*\\)"))
    {
	list spaces = [];
	list values = Sysconfig::ParseString(regexpsub(type, "^list\\((.*)\\)", "\\1"), Sysconfig::parse_param);

	foreach(string value, values, ``{
		spaces = add(spaces, mergestring(splitstring(value, " "), "&nbsp;"));
	    }
	);

	ret = mergestring(spaces, ", ");
    }
    else if (regexpmatch(type, "^string\\(.*\\)"))
    {
	list spaces = [];
	list values = Sysconfig::ParseString(regexpsub(type, "^string\\((.*)\\)", "\\1"), Sysconfig::parse_param);

	foreach(string value, values, ``{
		spaces = add(spaces, mergestring(splitstring(value, " "), "&nbsp;"));
	    }
	);

	// suffix added to the allowed (predefined) values
	ret = mergestring(spaces, ", ") + " <I>" + _("or any value") + "</I>";
    }
    else if (regexpmatch(type, "^regexp\\(.*\\)"))
    {
	string regex = regexpsub(type, "^regexp\\((.*)\\)", "\\1");
	// Translation: description of possible values, regular expression string is added after the text
	ret = "<I>" + _("Value Matching Regular Expression:") + "</I>" + regex;
    }
    else if (type == "integer")
    {
	// allowed value description
	ret = "<I>" + _("Any integer value") + "</I>";
    }
    else if (regexpmatch(type, "^integer\\(.*:.*\\)"))
    {
	string min = regexpsub(type, "^integer\\((.*):.*\\)", "\\1");
	string max = regexpsub(type, "^integer\\(.*:(.*)\\)", "\\1");

	y2milestone("min: %1, max: %2", min, max);

	if (max == "" && min != "")
	{
	    // allowed value description
	    ret = "<I>" + sformat(_("Integer value greater or equal to %1"), min) + "</I>";
	}
	else if (min == "" && max != "")
	{
	    // allowed value description
	    ret = "<I>" + sformat(_("Integer value less or equal to %1"), max) + "</I>";
	}
	else
	{
	    // Translation: allowed value description, %1 is minimum value, %2 is maximum integer value
	    ret = "<I>" + sformat(_("Any integer value from %1 to %2"), min, max) + "</I>";
	}
    }
    else if (type == "string")
    {
	// allowed value description - any value is allowed
	ret = "<I>" + _("Any value") + "</I>";
    }
    else if (type == "ip")
    {
	// allowed value description - IP adress
	ret = "<I>" + _("IPv4 or IPv6 address") + "</I>";
    }
    else if (type == "ip4")
    {
	// allowed value description - IPv4 adress
	ret = "<I>" + _("IPv4 address") + "</I>";
    }
    else if (type == "ip6")
    {
	// allowed value description - IPv6 adress
	ret = "<I>" + _("IPv6 address") + "</I>";
    }
    else
    {
	y2warning("Unknown type definition: %1", type);
    }

    return ret;
}

/**
 * Update combo box in dialog
 * @param description Variable description
 * @param set_default Set to true ifdefault value should be in the combo box
 */
global define void update_combo(map description, boolean set_default) ``{
    string varname = description["name"]:"";

    // modification flag added to variable name (if it was changed)
    string modif_flag = (haskey(description, "new_value")) ? "  " + _("(changed)") : "";

    if (combo_editable(description))
    {
	// combo box widget label - variable name is appended to the string
	UI::ReplaceWidget(`id(`replace), `ComboBox (`id(`combo), `opt(`editable, `hstretch), _("S&etting of: ") + varname + modif_flag, combo_list(description, set_default)));
    }
    else
    {
	// combo box widget label - variable name is appended to the string
	UI::ReplaceWidget(`id(`replace), `ComboBox (`id(`combo), `opt(`hstretch), _("S&etting of: ") + varname + modif_flag, combo_list(description, set_default)));
    }

    // disable combo for non-leaf nodes
    UI::ChangeWidget(`id(`combo), `Enabled, ((description["file"]:"") != ""));
}

/**
 * Update "Default" button state (enable/disable) in the dialog
 * @param description Variable description
 */
global define void update_button_state(map description) ``{
    string def = description["Default"]:nil;

    UI::ChangeWidget(`id(`def), `Enabled, (def != nil));
}

/**
 * Update location text in the dialog
 * @param description Variable description
 */
global define void update_location(map description) ``{
    string l = description["location"]:"";

    // header label
    UI::ChangeWidget(`id(`heading), `Value, _("Current Selection: ") + l);
}

/**
 * Is selected item in the tree widget leaf node?
 * @param id Value from tree widget
 * @return boolean True if node is not leaf-node
 */
global define boolean is_node(string id) ``{
    return (findfirstof(id, "$") == nil);
}

/**
 * Set new value for variable, warn user if new value does not match type definition.
 * @param force_change force value as changed even if it is equal to the old one
 */
global define void check_set_current_value(boolean force_change)
``{
    // check current value
    if (selected_variable != "")
    {
	string new_value = backslash_add(UI::QueryWidget(`id(`combo), `Value));

	if (Sysconfig::get_name_from_id(selected_variable) != "")
	{
	    // variable was selected (not category)
	    symbol result = Sysconfig::set_value(selected_variable, new_value, false, force_change);

	    if (result == `not_valid)
	    {
		map d = Sysconfig::get_description(selected_variable);
		string t = d["Type"]:"string";

		// popup question dialog: variable value does not match defined type - ask user to set value (%1 is value entered by user, %2 is allowed type - e.g. integer
		if (UI::AnyQuestionPopup(WarningMsg(), sformat(_("Value '%1'
does not match type '%2'.

Really set this value?
"), new_value, t), UI::YesButtonLabel(), UI::NoButtonLabel(), `focus_no) == true)
		{
		    // force setting of value
		    Sysconfig::set_value(selected_variable, new_value, true, force_change);
		}
	    }
	}
    }
}

/**
 * Create table content list for selected variables
 * @param varids Variables which will be contained in the table
 * @return list Table content
 */
global define list create_table_content(list varids)
``{
    list table_content = [];

    foreach(string varid, varids,
	``{
	    map descr = Sysconfig::get_description(varid);
	    string name = descr["name"]:"";
	    string old = descr["value"]:"";
	    string new = descr["new_value"]:"";
	    string file = descr["file"]:"";

	    // display only beginning of comment (to limit table space used)
	    string comm = descr["comment"]:"";
	    // remove newlines
	    comm = Sysconfig::remove_whitespaces(mergestring(splitstring(comm, "\n"), " "));

	    if (size(comm) > 90)
	    {
		comm = substring(comm, 0, 90);
	    }

	    table_content = add(table_content, `item(`id(varid), name, new, old, file, comm));
	}
    );

    return table_content;
}

/**
 * Display main configuration dialog
 * @return dialog result
 */
global define symbol MainDialog() ``{

    UI::OpenDialog(`opt(`defaultsize),
	`VBox(`Left(`Image(`suseheader, "SuSE")),
	    `HSpacing(85),
	    `HWeight(70,
		`VBox(
		    `HBox(
			`HWeight(35,
			    // tree widget label
			    `Tree(`id(`tree), `opt(`notify, `vstretch), _("&Configuration Options"), Sysconfig::tree_content)
			),
			`HSpacing(1),
			`HWeight(65,
			    `VBox(`HSpacing(60),
				// label widget
				`Left(`Heading(`id(`heading), `opt(`hstretch), _("Current Selection: "))),
				`VSpacing(0.5),
				`HBox(
				    `ReplacePoint(`id(`replace),
					// combo box label
					`ComboBox (`id(`combo), `opt(`disabled, `hstretch), _("S&etting of: "),  [""])
				    ),
				    `VBox(
					// dummy widget used to align button
					`Label(""),
					// push button label
					`PushButton(`id(`def), `opt(`disabled), _("&Default"))
				    )
				),
				`VSpacing(1),
				// help rich text displayed after module start (1/2)
				`RichText(`id(`rt), (Sysconfig::powertweak_mode == true) ? _("Powertweak Configuration") :
				    _("<P><B>System Configuration Editor</B></P><P>With the system configuration editor, you can change some system settings. You can also use YaST2 to configure your hardware and system settings.</P>") +
				// help rich text displayed after module start (2/2)
				    _("<P><B>Note:</B> Descriptions are not translated because thay are read directly from configuration files.</P>")),
				// push button label - displayed only in autoinstallation config mode
				(Mode::config == true) ? `HBox(`PushButton(`id(`use_current), _("&Use Current Value")),
					// push button label - displayed only in autoinstallation config mode
					`PushButton(`id(`add_new), `opt(`key_F3), _("&Add New Variable..."))
				    ) : `Empty()
			    )
			)
		    ),

		   `HBox(
			 // back pushbutton: the user input is ignored and the last dialog is called
			 `PushButton(`id(`abort), `opt(`key_F9), AbortButtonLabel()),
			 `HStretch(),
			 `PushButton(`id(`help), `opt(`key_F1), HelpButtonLabel()),
			 `HStretch(),
			  // Translation: push button label
			 `PushButton(`id(`search), _("&Search")),
			 `HStretch(),
			 `PushButton(`id(`next), `opt(`key_F10), FinishButtonLabel())
			 )
		    )
		)
	    )
    );


    symbol ret = nil;

    while(ret != `cancel && ret != `abort && ret != `next && ret != `back)
    {
	ret = UI::UserInput();

	if (ret == `tree)
	{
	    check_set_current_value(false);

	    string selected = UI::QueryWidget(`id(`tree), `CurrentItem);
	    selected_variable = selected;
	    y2milestone("Selected: %1", selected);

	    map description = Sysconfig::get_description(selected);

	    y2milestone("Descr: %1", description);

	    // update richtext content
	    UI::ChangeWidget(`id(`rt), `Value, create_richtext_description(description));

	    // update combo box
	    update_combo(description, false);

	    // update "Default" button state (enable/disable)
	    update_button_state(description);

	    // update location in header
	    update_location(description);
	}
	// "Default" button
	else if (ret == `def)
	{
	    map description = Sysconfig::get_description(selected_variable);
	    update_combo(description, true);
	}
	else if (ret == `next)
	{
	    // check if current value was modified
	    check_set_current_value(false);

	    list modified = Sysconfig::get_modified();

	    // show table with modified variables
	    if (size(modified) > 0)
	    {

		y2milestone("Modified variables: %1", modified);

		// popup dialog header
		map result = display_variables_dialog(_("Modified Variables"),
// help text in popup dialog
_("Here, see the values YaST2 will change.
Choose \"OK\" for YaST2 to save these changes.
Choose \"Cancel\" to edit the values again.
"),			create_table_content(modified), UI::OKButtonLabel(), UI::CancelButtonLabel(), _("Confirm each activation command"), false);

		if (result["ui"]:`dummy == `cancel)
		{
		    ret = `again;
		}

		// set confirmation flag
		Sysconfig::ConfirmActions = result["checkbox"]:false;
	    }
	}
	else if (ret == `search)
	{
	    map search_parameters = display_search_dialog();

	    if (search_parameters != $[])
	    {
		list found = Sysconfig::search(search_parameters, true);

		if (size(found) > 0)
		{
		    // // popup dialog header
		    map input = display_variables_dialog(_("Search Result"),
			// help text in popup dialog
			_("The search results are displayed here. If you see the item you want, select it then click \"Go to\". Otherwise, click \"Cancel\" to close this dialog."), create_table_content(found),
			// push button label
			 _("&Go to"), UI::CancelButtonLabel(), "", nil);

		    if (input["ui"]:`dummy == `cancel)
		    {
			ret = `again;
		    }
		    else
		    {
			string sel = input["selected"]:nil;
			if (sel != nil)
			{
			    UI::ChangeWidget(`id(`tree), `CurrentItem, sel);
			}
		    }
		}
		else
		{
		    // popup message - search result message
		    UI::MessagePopup(_("No entries found"));
		}
	    }
	}
	else if (ret == `help)
	{
	    string helptext =
		// helptext for popup - part 1/3
		_("<p>After you save your changes, this editor changes the variables in the
corresponding  sysconfig file. Then it runs
SuSEconfig, which changes the underlying configuration files, stops and starts daemons,
and runs low-level configuration tools so your configuration in sysconfig takes effect.</p>
") +

                // helptext for popup - part 2/3
		_("<p><b>Important:</b> You still can edit each individual configuration file manually.</p>") +

                // helptext for popup - part 3/3
		_("<p> SuSEconfig saves a checksum of each configuration file, so that it can detect if
 you have manually changed any of them.  If you have changed a configuration file manually,
 it will not touch it.</p>");


            UI::OpenDialog( `opt(`decorated ),
		`HBox( `VSpacing(16),
		       `VBox(
			   `HSpacing(60),
			   // popup window header
			   `Heading(_("Help")),
			   `VSpacing(0.5),
			   `RichText(helptext),
			   `VSpacing(1.5),
			    // push button label
			   `PushButton(`id(`ok), `opt(`default, `key_F10), OKButtonLabel())
			   )
		    )
            );

            UI::SetFocus(`id(`ok));
            UI::UserInput();
            UI::CloseDialog();
	}
	else if (ret == `abort || ret == `cancel)
	{
	    if (!ReallyAbort())
	    {
		ret = nil;
	    }
	    else
	    {
		// `cancel is same as `abort
		ret = `abort;
	    }
	}
	// autoinstallation config mode only
	else if (ret == `use_current)
	{
	    // force current value as changed
	    check_set_current_value(true);

	    map description = Sysconfig::get_description(selected_variable);

	    // update combo box - add "changed" status
	    update_combo(description, false);
	}
	// autoinstallation config mode only
	else if (ret == `add_new)
	{
	    // ask user for new variable name, value and location (file name)
	    map in = add_new_variable();

	    symbol ui = in["ui"]:`cancel;
	    string name = in["name"]:"";
	    string file = in["file"]:"";
	    string value = in["value"]:"";

	    if (ui == `ok)
	    {
		Sysconfig::set_value(sformat("%1$%2", name, file), value, false, true);
	    }
	}
	else
	{
	    y2warning("Unknown UserInput: %1", ret);
	}
    }

    UI::CloseDialog();

    return ret;
}

}
