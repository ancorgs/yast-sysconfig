/**
 * File:	include/sysconfig/complex.ycp
 * Package:	Configuration of sysconfig
 * Summary:	Dialogs definitions
 * Authors:	Ladislav Slezak <lslezak@suse.cz>
 *
 * $Id$
 */

{

textdomain "sysconfig";

import "Wizard";
import "Sysconfig";

include "ui/common_popups.ycp";
include "ui/common_messages.ycp";

include "sysconfig/helps.ycp";
include "sysconfig/routines.ycp";

/**
 * current selected variable in the tree widget
 */
global string selected_variable = "";

/**
 * Return a modification status
 * @return true if data was modified
 */
global define boolean Modified() ``{
    return Sysconfig::Modified();
}


/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    Sysconfig::AbortFunction = ``{ return PollAbort();};

// FIXME:    boolean ret = Sysconfig::Read(["/etc/sysconfig/*"]);
    boolean ret = Sysconfig::Read(["/tmp/fillup-templates/*", "/etc/sysconfig/*"]);	// TODO: add metadata file with predefined paths and descriptions

    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
global define symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    Sysconfig::AbortFunction = ``{ return PollAbort();};

    boolean ret = true;

    if (Sysconfig::Modified() == true)
    {
	// write changes
	ret = Sysconfig::Write();

	// start suseconfig
	WFM::CallFunction(`inst_suseconfig(false, false));
    }

    return ret ? `next : `abort;
}

global define string create_richtext_description(map description) ``{
    string varname = description["name"]:"";
    string file = description["file"]:"";
    string default_value = description["Default"]:nil;
    string comment = description["comment"]:"";

    string possible_vals = possible_values(description);

    string result = "";

    if (file != "" && file != nil)
    {
	result = result + "<P><B>" + _("File: ") + "</B> " + file + "</P>";
    }

    if (possible_vals != "" && possible_vals != nil)
    {
	result = result + "<P><B>" + _("Possible values: ") + "</B> " + possible_vals + "</P>";
    }

    if (default_value != nil && size(file) > 0)
    {
	// quote empty value
	if (default_value == "")
	{
	    default_value = "\"\"";
	}
	result = result + "<P><B>" + _("Default value: ") + "</B> " + default_value + "</P>";
    }

    // if value was modified add original value
    if (haskey(description, "new_value"))
    {
	string original = description["value"]:"";

	// quote empty value
	if (original == "")
	{
	    original = "\"\"";
	}
	result = result + "<P><B>" + _("Original value: ") + "</B> " + original + "</P>";
    }

    if (comment != "" && comment != nil)
    {
	result = result + "<P><B>" + _("Description: ") + "</B><BR> " + comment + "</P>";
    }

    return result;
}

global define boolean combo_editable(map description) ``{
    string type = description["Type"]:"";

    return (type == "" || regexpmatch(type, "^integer\\(.*:.*\\)$") || type == "integer"
	|| type == "string" || regexpmatch(type, "^string\\(.*\\)$") || type == "ip"
	|| regexpmatch(type, "^regexp\\(.*\\)$"));
}

global define list add_if_missing(list l, string v) ``{
    return (!contains(l, v)) ? add(l, v) : l;
}


global define string backslash_add(string input) ``{

    // escape double quotes and back slashes
    string escaped = "";
    integer pos = 0;

    while (pos < size(input))
    {
	string ch = substring(input, pos, 1);

	if (ch == "\\")
	{
	    escaped = escaped + "\\\\";
	}
	else
	{
	    if (ch == "\"")
	    {
		escaped = escaped + "\\\"";
	    }
	    else
	    {
		escaped = escaped + ch;
	    }
	}

	pos = pos + 1;
    }

    return escaped;
}

global define string backslash_remove(string input) ``{

    if (input == nil)
    {
	return nil;
    }

    string  ret = "";
    integer index = 0;
    boolean backslash = false;

    while (index < size(input))
    {
	string ch = substring(input, index, 1);

	if (backslash == false)
	{
	    if (ch == "\\")
	    {
		backslash = true;
	    }
	    else
	    {
		ret = ret + ch;
	    }
	}
	else
	{
	    ret = ret + ch;
	    backslash = false;
	}

	index = index + 1;
    }

    return ret;
}


global define list combo_list(map description, boolean set_default) ``{
    string new_value = backslash_remove(description["new_value"]:nil);
    string value = backslash_remove(description["value"]:"");
    list ret = [];

    if (set_default == true)
    {
	string def = description["Default"]:nil;

	if (def != nil)
	{
	    if (!contains(ret, def)) ret = add(ret, def);
	}
    }

    if (new_value != nil)
    {
	if (!contains(ret, new_value)) ret = add(ret, new_value);
    }
    else if (value != nil)
    {
	if (!contains(ret, value)) ret = add(ret, value);
    }

    string deflt = description["Default"]:"";
    list parsed = Sysconfig::parse_options(deflt);
    deflt = parsed[0]:deflt;

    string type = description["Type"]:"";

    if (type == "yesno")
    {
	if (!contains(ret, "yes")) ret = add(ret, "yes");
	if (!contains(ret, "no")) ret = add(ret, "no");
    }
    else if (type == "boolean")
    {
	if (!contains(ret, "true")) ret = add(ret, "true");
	if (!contains(ret, "false")) ret = add(ret, "false");
    }
    else if (regexpmatch(type, "^list\\(.*\\)"))
    {
	string values_string = regexpsub(type, "^list\\((.*)\\)", "\\1");
	list(string) parsed = Sysconfig::parse_options(values_string);

	// add missing items
	foreach(string option, parsed,
	    ``{
		if (!contains(ret, option)) ret = add(ret, option);
	    }
	);
    }
    else if (regexpmatch(type, "^string\\(.*\\)"))
    {
	string values_string = regexpsub(type, "^string\\((.*)\\)", "\\1");
	list(string) parsed = Sysconfig::parse_options(values_string);

	// add missing items
	foreach(string option, parsed,
	    ``{
		if (!contains(ret, option)) ret = add(ret, option);
	    }
	);
    }

    // add default value to the list
    if (!contains(ret, deflt)) ret = add(ret, deflt);

    // add old value to the list if variable was modified
    if (new_value != nil)
    {
	if (!contains(ret, value)) ret = add(ret, value);
    }

    y2milestone("combo list: %1", ret);

    return ret;
}

global define string possible_values(map description) ``{
    string ret = "";

    string type = description["Type"]:"";

    if (type == "yesno")
    {
	ret = ret + "yes,no";
    }
    else if (type == "boolean")
    {
	ret = "true,false";
    }
    else if (regexpmatch(type, "^list\\(.*\\)"))
    {
	list spaces = [];
	list values = Sysconfig::parse_options(regexpsub(type, "^list\\((.*)\\)", "\\1"));

	foreach(string value, values, ``{
		spaces = add(spaces, mergestring(splitstring(value, " "), "&nbsp;"));
	    }
	);

	ret = mergestring(spaces, ", ");
    }
    else if (regexpmatch(type, "^string\\(.*\\)"))
    {
	list spaces = [];
	list values = Sysconfig::parse_options(regexpsub(type, "^string\\((.*)\\)", "\\1"));

	foreach(string value, values, ``{
		spaces = add(spaces, mergestring(splitstring(value, " "), "&nbsp;"));
	    }
	);

	ret = mergestring(spaces, ", ") + " <I>" + _("or any value") + "</I>";
    }
    else if (regexpmatch(type, "^regexp\\(.*\\)"))
    {
	string regex = regexpsub(type, "^regexp\\((.*)\\)", "\\1");
	ret = sformat(_("<I>Value matching regular expression</I> %1"), regex);
    }
    else if (type == "integer")
    {
	ret = "<I>" + _("Any integer value") + "</I>";
    }
    else if (regexpmatch(type, "^integer\\(.*:.*\\)"))
    {
	string min = regexpsub(type, "^integer\\((.*):.*\\)", "\\1");
	string max = regexpsub(type, "^integer\\(.*:(.*)\\)", "\\1");

	if (max == nil && min != nil)
	{
	    ret = "<I>" + sformat(_("Integer value greater or equal to %1"), min) + "</I>";
	}
	else if (min == nil && max != nil)
	{
	    ret = "<I>" + sformat(_("Integer value less or equal to %1"), max) + "</I>";
	}
	else
	{
	    // Translation: %1 is minimum value, %2 is maximum integer value
	    ret = "<I>" + sformat(_("Any integer value from %1 to %2"), min, max) + "</I>";
	}
    }
    else if (type == "string")
    {
	ret = "<I>" + _("Any value") + "</I>";
    }

    return ret;
}

global define void update_combo(map description, boolean set_default) ``{
    string varname = description["name"]:"";
    string modif_flag = (haskey(description, "new_value")) ? "  " + _("(changed)") : "";

    if (combo_editable(description))
    {
	UI::ReplaceWidget(`id(`replace), `ComboBox (`id(`combo), `opt(`editable, `hstretch), _("&Setting of: ") + varname + modif_flag, combo_list(description, set_default)));
    }
    else
    {
	UI::ReplaceWidget(`id(`replace), `ComboBox (`id(`combo), `opt(`hstretch), _("&Setting of: ") + varname + modif_flag, combo_list(description, set_default)));
    }

    // disable combo for non-leaf nodes
    UI::ChangeWidget(`id(`combo), `Enabled, ((description["file"]:"") != ""));
}

global define void update_button_state(map description) ``{
    string def = description["Default"]:nil;

    UI::ChangeWidget(`id(`def), `Enabled, (def != nil));
}

global define void update_location(map description) ``{
    string l = description["location"]:"";

    UI::ChangeWidget(`id(`heading), `Value, _("Current selection: ") + l);
}

global define boolean is_node(string id) ``{
    return (findfirstof(id, "$") == nil);
}

global define void check_set_current_value()
``{
    // check current value
    if (selected_variable != "")
    {
	string new_value = backslash_add(UI::QueryWidget(`id(`combo), `Value));

	if (Sysconfig::get_name_from_id(selected_variable) != "")
	{
	    // variable was selected (not category)
	    symbol result = Sysconfig::set_value(selected_variable, new_value, false);

	    if (result == `not_valid)
	    {
		map d = Sysconfig::get_description(selected_variable);
		string t = d["Type"]:"string";

		// variable value does not match defined type - ask user to set value
		if (UI::AnyQuestionPopup(_("Warning"), sformat(_("Value '%1'\ndoes not match type '%2'\n\nDo you really want to set this value?"), new_value, t), UI::YesButtonLabel(), UI::NoButtonLabel(), `focus_no) == true)
		{
		    // force setting of value
		    Sysconfig::set_value(selected_variable, new_value, true);
		}
	    }
	}
    }
}

global define list create_table_content(list varids)
``{
    list table_content = [];

    foreach(string varid, varids,
	``{
	    map descr = Sysconfig::get_description(varid);
	    string name = descr["name"]:"";
	    string old = descr["value"]:"";
	    string new = descr["new_value"]:"";
	    string file = descr["file"]:"";

	    // display only beginning of comment (to limit table space used)
	    string comm = descr["comment"]:"";
	    if (size(comm) > 90)
	    {
		comm = substring(comm, 0, 90);
	    }

	    table_content = add(table_content, `item(`id(varid), name, new, old, file, comm));
	}
    );

    return table_content;
}

/**
 * Display main configuration dialog
 * @return dialog result
 */
global define symbol MainDialog() ``{

    UI::OpenDialog(`opt(`defaultsize),
	`VBox(`Left(`Image(`suseheader, "SuSE")),
	    `HSpacing(85),
	    `HWeight(70,
		`VBox(
		    `HBox(
			`HWeight(35,
			    `Tree(`id(`tree), `opt(`notify, `vstretch), _("&Configuration options"), Sysconfig::tree_content)
			),
			`HSpacing(1),
			`HWeight(65,
			    `VBox(`HSpacing(60),
				`Left(`Heading(`id(`heading), `opt(`hstretch), "Current selection: ")),
				`VSpacing(0.5),
				`HBox(
				    `ReplacePoint(`id(`replace),
					`ComboBox (`id(`combo), `opt(`disabled, `hstretch), _("&Setting of: "),  [""])
				    ),
				    `VBox(
					`Label(""),
					`PushButton(`id(`def), `opt(`disabled), _("&Default"))
				    )
				),
				`VSpacing(1),
				`RichText(`id(`rt), _("<P><B>System configuration editor</B></P><P>With system configuration editor you can...</P>") +
				    _("<P><B>Note:</B> Descriptions are not translated</P>")
				)
			    )
			)
		    ),

		   `HBox(
			 // back pushbutton: the user input is ignored and the last dialog is called
			 `PushButton(`id(`back), AbortButtonLabel()),
			 `HStretch(),
			 `PushButton(`id(`help), HelpButtonLabel()),
			 `HStretch(),
			  // Translation: push button label
			 `PushButton(`id(`search), _("&Search")),
			 `HStretch(),
			 `PushButton(`id(`next), FinishButtonLabel())
			 )
		    )
		)
	    )
    );


    symbol ret = nil;

    while(ret != `cancel && ret != `abort && ret != `next && ret != `back)
    {
	ret = UI::UserInput();

	if (ret == `tree)
	{
	    check_set_current_value();

	    string selected = UI::QueryWidget(`id(`tree), `CurrentItem);
	    selected_variable = selected;
	    y2milestone("Selected: %1", selected);

	    map description = Sysconfig::get_description(selected);

	    y2milestone("Descr: %1", description);

	    // update richtext content
	    UI::ChangeWidget(`id(`rt), `Value, create_richtext_description(description));

	    // update combo box
	    update_combo(description, false);

	    // update "Default" button state (enable/disable)
	    update_button_state(description);

	    // update location in header
	    update_location(description);
	}
	// "Default" button
	else if (ret == `def)
	{
	    map description = Sysconfig::get_description(selected_variable);
	    update_combo(description, true);
	}
	else if (ret == `next)
	{
	    // check if current value was modified
	    check_set_current_value();

	    list modified = Sysconfig::get_modified();

	    // show table with modified variables
	    if (size(modified) > 0)
	    {

		y2milestone("Modified variables: %1", modified);
		map result = display_variables_dialog(_("Modified variables"), _("Here, see the values YaST2 will change.
Choose \"OK\" for YaST2 to save these changes.
Choose \"Cancel\" to edit the values again.
"),			create_table_content(modified), UI::OKButtonLabel(), UI::CancelButtonLabel());

		if (result["ui"]:`dummy == `cancel)
		{
		    ret = `again;
		}
	    }
	}
	else if (ret == `search)
	{
	    map search_parameters = display_search_dialog();

	    if (search_parameters != $[])
	    {
		list found = Sysconfig::search(search_parameters, true);

		if (size(found) > 0)
		{
		    map input = display_variables_dialog(_("Search sesult"), _("Here is displayed search results. If you see the item you want, select this item then click \"Go to\". Otherwise, click \"Cancel\" to close this dialog."), create_table_content(found), _("&Go to"), UI::CancelButtonLabel());

		    if (input["ui"]:`dummy == `cancel)
		    {
			ret = `again;
		    }
		    else
		    {
			string sel = input["selected"]:nil;
			if (sel != nil)
			{
			    UI::ChangeWidget(`id(`tree), `CurrentItem, sel);
			}
		    }
		}
		else
		{
		    UI::MessagePopup(_("No entries found"));
		}
	    }
	}
	else if (ret == `help)
	{
	    string helptext =
		// helptext for popup - part 1/3
		_("<p>After you save your changes, this editor changes the variables in the
corresponding  sysconfig file. Then it runs
SuSEconfig, which changes the underlying configuration files, stops and starts daemons,
and runs low-level configuration tools so your configuration in sysconfig takes effect.</p>
") +

                // helptext for popup - part 2/3
		_("<p><b>Important:</b> You still can edit each individual configuration file manually.</p>") +

                // helptext for popup - part 3/3
		_("<p> SuSEconfig saves a checksum of each configuration file, so that it can detect if
 you have manually changed any of them.  If you have changed a configuration file manually,
 it will not touch it.</p>");


            UI::OpenDialog( `opt(`decorated ),
		`HBox( `VSpacing(16),
		       `VBox(
			   `HSpacing(60),
			   // popup window header
			   `Heading(_("Help")),
			   `VSpacing(0.5),
			   `RichText(helptext),
			   `VSpacing(1.5),
			    // push button label
			   `PushButton(`id(`ok), `opt(`default), OKButtonLabel())
			   )
		    )
            );

            UI::SetFocus(`id(`ok));
            UI::UserInput();
            UI::CloseDialog();
	}
	else if (ret == `abort || ret == `cancel)
	{
	    if (!ReallyAbort())
	    {
		ret = nil;
	    }
	    else
	    {
		// `cancel is same as `abort
		ret = `abort;
	    }
	}
    }

    UI::CloseDialog();

    return ret;
}

}
