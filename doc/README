Name 
    rc-config editor database (rc.config.eddb)

Description

    Meta information for rc-config variables are stored in the 
    rc-config-eddb. The rc.config itself is not touched.
 
    The meta information is used by the graphical yast2 rc-config
    editor, which for example displays the variables as a tree and supports
    combo boxes to edit the values

    For each rc-config varaible additional information CAN be
    stored in rc-eddb, but must not!
  
    The eddb is ONE file, that contain the information for ALL known 
    rc-config variables. 
     
    
Goals:
    Data for this file comes from the package db

    The maintanace is done via package-db
    A script checks the constistence of the eddb via rc.config


File format:
   
    The file /usr/lib/YaST2/rc.config.eddb has the following format:

    -----------------------------------------------------
    Comments
    # this are comments
    \n
    \n<whitespace>

    -----------------------------------------------------
    Lines to define meta information:

    <VARIABLE> <property> <value>

    Example: 
    ENABLE_SUSECONFIG type boolean 

    -----------------------------------------------------
    <VARIABLE> ::= <all rc-config variables> 
                   all unknown variable are ignored / the consistency
                   check gives a warning

    -----------------------------------------------------
     <property> defines the meta information, which is set
      
     <property> ::= 
    
     <type>                type of the variable (i.e. boolean, string ..)
     <mtype>               like type, but more than one item is allowed 
     <typedef>             strict | not_strict
     <path>                hierachical information
     <just_run>            just run this script
     <dialogtype>          type of dialog to display variable
     <service>             names of all init scripts

    ----------------------------------------------------- 
    <type> and <mtype> define the type of the variable
    a typedefinition can be strict, no other values are allowed
 
    <type>    ::=  type    [ string | integer | boolean | enum  <enumlist> ]
    <mtype>   ::= mtype    [ string | integer | boolean | enum  <enumlist> ]
    <typedef> ::=  typedef [ strict | not_strict ]
     
     The default for a undefined <type> or <mtype> is "string" 
     The default for a undefined <typedef> is "not_strict"

     Examples:
     LANGUAGE             type    string
     ENABLE_SUSECONFIG    type    boolean
     KBD_TTY             mtype    enum     "tty1,tty2,tty3,tty4,tty5,tty6"
     KBD_TTY              typedef not_strict
     
     
    ----------------------------------------------------- 
   
    <path> defines the hierarchical classification of the variable

    <path> ::= path <path-string>
    The default for a undefined <path> is "path/etc"

    I4L_START        path   /services/startstop/net
    I4L_ID           path   /net/isdn/base/hw
    I4L_MEMBASE      path   /net/isdn/base/hw
    I4L_PORT         path   /net/isdn/base/etc
    I4L_IRQ          path   /net/isdn/base/etc
    I4L_DIALMODE_0   path  /net/isdn/conn0/base
    I4L_IDLETIME_0   path  /net/isdn/conn0/base
    I4L_REMOTE_OUT_0 path  /net/isdn/conn0/remote
    I4L_REMOTE_IN_0  path  /net/isdn/conn0/remote
     
    ----------------------------------------------------- 
    <just_run> can be used, to avoid that every time a variable is
    changed, the whole SuSEconfig must be run. 
  
    The default for a undefined just_run is SuSEconfig  

    <just_run> ::= just_run <script_name>

    Example
    SENDMAIL_LOCALHOST just_run  /etc/rc.config.d/sendmail.rc.config
    START_IDEDMA       just_run  /etc/rc.config.d/idedma.rc.config

    ----------------------------------------------------- 
    With <dialogtype> you can configure a special dialog, in which the
    variable can be edited.
    Per default five dialogs are available dialog1 .. dialog5
    "dialog1" supports one editabel variable
    "dialog2" supports two editabe  variables 
    ...
    "dialog5" supports five editabe variables 

    The default calculates the number of entries in a dialog,
    and chooses the right dialog.
    ----------------------------------------------------- 
    <service>             names of all init scripts
    default is no init script

    Example 
    IFCONFIG_0                path        /network/ifconfig
    IFCONFIG_0                type        string
    IFCONFIG_0                just_run    SuSEconfig.pcmcia
    IFCONFIG_0                service     network,i4l,dummy,dhclient,firewal
    ----------------------------------------------------- 
